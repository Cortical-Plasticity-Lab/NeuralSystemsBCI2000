// Import definitions for ActiChamp.h, generated by dylib_imports.sh
#include "ActiChamp.imports.h"
#include "DylibImports.h"

#if !DYNAMIC_IMPORTS

namespace Dylib { bool ActiChamp_Loaded() { return true; } }

#else // DYNAMIC_IMPORTS

extern "C" {
int (__stdcall *champGetVersion)(HANDLE hDevice, t_champVersion *Version) = 0;
unsigned int (__stdcall *champGetCount)(void) = 0;
HANDLE (__stdcall *champOpen)(unsigned int Number) = 0;
int (__stdcall *champClose)(HANDLE hDevice) = 0;
int (__stdcall *champGetSettingsEx)(HANDLE hDevice, t_champSettingsEx *SettingsEx) = 0;
int (__stdcall *champSetSettingsEx)(HANDLE hDevice, t_champSettingsEx *SettingsEx) = 0;
int (__stdcall *champGetSettings)(HANDLE hDevice, t_champSettings *Settings) = 0;
int (__stdcall *champSetSettings)(HANDLE hDevice, t_champSettings *Settings) = 0;
int (__stdcall *champGetProperty)(HANDLE hDevice, t_champProperty *Property) = 0;
int (__stdcall *champStart)(HANDLE hDevice) = 0;
int (__stdcall *champStartExt)(HANDLE hDevice, unsigned int Params) = 0;
int (__stdcall *champStop)(HANDLE hDevice) = 0;
int (__stdcall *champGetData)(HANDLE hDevice, void *Buffer, unsigned int Size) = 0;
int (__stdcall *champGetDataBlocking)(HANDLE hDevice, void *Buffer, unsigned int Size) = 0;
int (__stdcall *champGetDataStatus)(HANDLE hDevice, t_champDataStatus *DataStatus) = 0;
int (__stdcall *champGetErrorStatus)(HANDLE hDevice, t_champErrorStatus *ErrorStatus) = 0;
int (__stdcall *champGetTriggers)(HANDLE hDevice, unsigned int *Triggers) = 0;
int (__stdcall *champSetTriggers)(HANDLE hDevice, unsigned int Triggers) = 0;
int (__stdcall *champImpedanceGetData)(HANDLE hDevice, unsigned int *Buffer, unsigned int Size) = 0;
int (__stdcall *champImpedanceGetSetup)(HANDLE hDevice, t_champImpedanceSetup *Setup) = 0;
int (__stdcall *champImpedanceSetSetup)(HANDLE hDevice, t_champImpedanceSetup *Setup) = 0;
int (__stdcall *champImpedanceGetMode)(HANDLE hDevice, t_champImpedanceMode *Mode) = 0;
int (__stdcall *champImpedanceSetMode)(HANDLE hDevice, t_champImpedanceMode *Mode) = 0;
int (__stdcall *champSetElectrodes)(HANDLE hDevice, unsigned int *Buffer, unsigned int Size) = 0;
int (__stdcall *champGetVoltages)(HANDLE hDevice, t_champVoltages *Voltages) = 0;
int (__stdcall *champGetModules)(HANDLE hDevice, t_champModules *Modules) = 0;
int (__stdcall *champSetModules)(HANDLE hDevice, t_champModules *Modules) = 0;
int (__stdcall *champGetMyButton)(HANDLE hDevice, t_champMyButton *MyButton) = 0;
int (__stdcall *champSetMyButtonLed)(HANDLE hDevice, unsigned int Period, unsigned int DutyCycle) = 0;
int (__stdcall *champSetActiveShieldGain)(HANDLE hDevice, unsigned int Gain) = 0;
int (__stdcall *champGetError)(HANDLE hDevice, int *Code, char *Buffer, unsigned int Size) = 0;
}

static const Dylib::Import imports[] =
{
  { "champGetVersion", (void**)&champGetVersion, Dylib::Import::cMangled },
  { "champGetCount", (void**)&champGetCount, Dylib::Import::cMangled },
  { "champOpen", (void**)&champOpen, Dylib::Import::cMangled },
  { "champClose", (void**)&champClose, Dylib::Import::cMangled },
  { "champGetSettingsEx", (void**)&champGetSettingsEx, Dylib::Import::cMangled },
  { "champSetSettingsEx", (void**)&champSetSettingsEx, Dylib::Import::cMangled },
  { "champGetSettings", (void**)&champGetSettings, Dylib::Import::cMangled },
  { "champSetSettings", (void**)&champSetSettings, Dylib::Import::cMangled },
  { "champGetProperty", (void**)&champGetProperty, Dylib::Import::cMangled },
  { "champStart", (void**)&champStart, Dylib::Import::cMangled },
  { "champStartExt", (void**)&champStartExt, Dylib::Import::cMangled },
  { "champStop", (void**)&champStop, Dylib::Import::cMangled },
  { "champGetData", (void**)&champGetData, Dylib::Import::cMangled },
  { "champGetDataBlocking", (void**)&champGetDataBlocking, Dylib::Import::cMangled },
  { "champGetDataStatus", (void**)&champGetDataStatus, Dylib::Import::cMangled },
  { "champGetErrorStatus", (void**)&champGetErrorStatus, Dylib::Import::cMangled },
  { "champGetTriggers", (void**)&champGetTriggers, Dylib::Import::cMangled },
  { "champSetTriggers", (void**)&champSetTriggers, Dylib::Import::cMangled },
  { "champImpedanceGetData", (void**)&champImpedanceGetData, Dylib::Import::cMangled },
  { "champImpedanceGetSetup", (void**)&champImpedanceGetSetup, Dylib::Import::cMangled },
  { "champImpedanceSetSetup", (void**)&champImpedanceSetSetup, Dylib::Import::cMangled },
  { "champImpedanceGetMode", (void**)&champImpedanceGetMode, Dylib::Import::cMangled },
  { "champImpedanceSetMode", (void**)&champImpedanceSetMode, Dylib::Import::cMangled },
  { "champSetElectrodes", (void**)&champSetElectrodes, Dylib::Import::cMangled },
  { "champGetVoltages", (void**)&champGetVoltages, Dylib::Import::cMangled },
  { "champGetModules", (void**)&champGetModules, Dylib::Import::cMangled },
  { "champSetModules", (void**)&champSetModules, Dylib::Import::cMangled },
  { "champGetMyButton", (void**)&champGetMyButton, Dylib::Import::cMangled },
  { "champSetMyButtonLed", (void**)&champSetMyButtonLed, Dylib::Import::cMangled },
  { "champSetActiveShieldGain", (void**)&champSetActiveShieldGain, Dylib::Import::cMangled },
  { "champGetError", (void**)&champGetError, Dylib::Import::cMangled },
  { 0, 0, 0 }
};

// Here you may specify a custom error message to be displayed when the library cannot be found.
static const char* notFoundMsg = "";
// Here you may specify an URL to some local or remote help resource.
static const char* notFoundURL = "";
RegisterDylib( ActiChamp, imports, notFoundMsg, notFoundURL );

#endif // DYNAMIC_IMPORTS
