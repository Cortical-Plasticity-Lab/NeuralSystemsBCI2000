// Import definitions for gHIamp.h, generated by dylib_imports.sh
#include "gHIamp.imports.h"
#include "DylibImports.h"

#if !DYNAMIC_IMPORTS

namespace Dylib { bool gHIamp_Loaded() { return true; } }

#else // DYNAMIC_IMPORTS

extern "C" {
FLOAT (__stdcall *GT_GetDriverVersion)(void) = 0;
FLOAT (__stdcall *GT_GetHWVersion)(HANDLE hDevice) = 0;
HANDLE (__stdcall *GT_OpenDevice)(int iPortNumber) = 0;
HANDLE (__stdcall *GT_OpenDeviceEx)(LPSTR lpSerial) = 0;
BOOL (__stdcall *GT_CloseDevice)(HANDLE *hDevice) = 0;
BOOL (__stdcall *GT_GetData)(HANDLE hDevice, BYTE *pData, DWORD dwSzBuffer, OVERLAPPED *ov) = 0;
BOOL (__stdcall *GT_GetOverlappedResult)(HANDLE hDevice, LPOVERLAPPED lpOverlapped, LPDWORD lpNumberOfBytesTransferred, BOOL bWait) = 0;
BOOL (__stdcall *GT_Start)(HANDLE hDevice) = 0;
BOOL (__stdcall *GT_Stop)(HANDLE hDevice) = 0;
BOOL (__stdcall *GT_GetLastError)(WORD *wErrorCode, char *pLastError) = 0;
BOOL (__stdcall *GT_ResetTransfer)(HANDLE hDevice) = 0;
BOOL (__stdcall *GT_GetSerial)(HANDLE hDevice, LPSTR lpstrSerial, UINT uiSize) = 0;
BOOL (__stdcall *GT_VR)(int nargin, void *varargin[], int nargout, void *varargout[]) = 0;
BOOL (__stdcall *GT_Calibrate)(HANDLE hDevice, PSCALE scaling) = 0;
BOOL (__stdcall *GT_SetScale)(HANDLE hDevice, PSCALE scaling) = 0;
BOOL (__stdcall *GT_GetScale)(HANDLE hDevice, PSCALE scaling) = 0;
BOOL (__stdcall *GT_GetFactoryScaleSettings)(HANDLE hDevice, PSCALE factoryScaling) = 0;
BOOL (__stdcall *GT_GetImpedance)(HANDLE hDevice, GT_HIAMP_CHANNEL_IMPEDANCES *channelImpedances) = 0;
BOOL (__stdcall *GT_GetAvailableChannels)(HANDLE hDevice, UCHAR *availableChannels, WORD availableChannelsLength) = 0;
BOOL (__stdcall *GT_GetNumberOfSupportedSampleRates)(HANDLE hDevice, int *numberOfSupportedSampleRates) = 0;
BOOL (__stdcall *GT_GetSupportedSampleRates)(HANDLE hDevice, float* supportedSampleRates) = 0;
BOOL (__stdcall *GT_SetConfiguration)(HANDLE hDevice, GT_HIAMP_CONFIGURATION configuration) = 0;
BOOL (__stdcall *GT_GetConfiguration)(HANDLE hDevice, GT_HIAMP_CONFIGURATION *configuration) = 0;
BOOL (__stdcall *GT_GetFilterSpec)(FILT *filterSpec) = 0;
BOOL (__stdcall *GT_GetNumberOfFilter)(int* nof) = 0;
BOOL (__stdcall *GT_GetNotchSpec)(FILT *filterSpec) = 0;
BOOL (__stdcall *GT_GetNumberOfNotch)(int* nof) = 0;
}

static const Dylib::Import imports[] =
{
  { "GT_GetDriverVersion", (void**)&GT_GetDriverVersion, Dylib::Import::cMangled },
  { "GT_GetHWVersion", (void**)&GT_GetHWVersion, Dylib::Import::cMangled },
  { "GT_OpenDevice", (void**)&GT_OpenDevice, Dylib::Import::cMangled },
  { "GT_OpenDeviceEx", (void**)&GT_OpenDeviceEx, Dylib::Import::cMangled },
  { "GT_CloseDevice", (void**)&GT_CloseDevice, Dylib::Import::cMangled },
  { "GT_GetData", (void**)&GT_GetData, Dylib::Import::cMangled },
  { "GT_GetOverlappedResult", (void**)&GT_GetOverlappedResult, Dylib::Import::cMangled },
  { "GT_Start", (void**)&GT_Start, Dylib::Import::cMangled },
  { "GT_Stop", (void**)&GT_Stop, Dylib::Import::cMangled },
  { "GT_GetLastError", (void**)&GT_GetLastError, Dylib::Import::cMangled },
  { "GT_ResetTransfer", (void**)&GT_ResetTransfer, Dylib::Import::cMangled },
  { "GT_GetSerial", (void**)&GT_GetSerial, Dylib::Import::cMangled },
  { "GT_VR", (void**)&GT_VR, Dylib::Import::cMangled },
  { "GT_Calibrate", (void**)&GT_Calibrate, Dylib::Import::cMangled },
  { "GT_SetScale", (void**)&GT_SetScale, Dylib::Import::cMangled },
  { "GT_GetScale", (void**)&GT_GetScale, Dylib::Import::cMangled },
  { "GT_GetFactoryScaleSettings", (void**)&GT_GetFactoryScaleSettings, Dylib::Import::cMangled },
  { "GT_GetImpedance", (void**)&GT_GetImpedance, Dylib::Import::cMangled },
  { "GT_GetAvailableChannels", (void**)&GT_GetAvailableChannels, Dylib::Import::cMangled },
  { "GT_GetNumberOfSupportedSampleRates", (void**)&GT_GetNumberOfSupportedSampleRates, Dylib::Import::cMangled },
  { "GT_GetSupportedSampleRates", (void**)&GT_GetSupportedSampleRates, Dylib::Import::cMangled },
  { "GT_SetConfiguration", (void**)&GT_SetConfiguration, Dylib::Import::cMangled },
  { "GT_GetConfiguration", (void**)&GT_GetConfiguration, Dylib::Import::cMangled },
  { "GT_GetFilterSpec", (void**)&GT_GetFilterSpec, Dylib::Import::cMangled },
  { "GT_GetNumberOfFilter", (void**)&GT_GetNumberOfFilter, Dylib::Import::cMangled },
  { "GT_GetNotchSpec", (void**)&GT_GetNotchSpec, Dylib::Import::cMangled },
  { "GT_GetNumberOfNotch", (void**)&GT_GetNumberOfNotch, Dylib::Import::cMangled },
  { 0, 0, 0 }
};

// Here you may specify a custom error message to be displayed when the library cannot be found.
static const char* notFoundMsg = "";
// Here you may specify an URL to some local or remote help resource.
static const char* notFoundURL = "";
RegisterDylib( gHIamp, imports, notFoundMsg, notFoundURL );

#endif // DYNAMIC_IMPORTS
