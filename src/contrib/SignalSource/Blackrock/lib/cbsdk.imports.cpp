// Import definitions for ../../src/contrib/SignalSource/Blackrock/lib/inc/cbsdk.h, generated by dylib_imports.sh
#include "cbsdk.imports.h"
#include "DylibImports.h"

#if DYNAMIC_IMPORTS

extern "C" {
cbSdkResult ( *cbSdkGetVersion)(UINT32 nInstance, cbSdkVersion * version) = 0;
cbSdkResult ( *cbSdkReadCCF)(UINT32 nInstance, cbSdkCCF * pData, const char * szFileName, bool bConvert, bool bSend, bool bThreaded) = 0;
cbSdkResult ( *cbSdkWriteCCF)(UINT32 nInstance, cbSdkCCF * pData, const char * szFileName, bool bThreaded) = 0;
cbSdkResult ( *cbSdkOpen)(UINT32 nInstance, cbSdkConnectionType conType, cbSdkConnection con) = 0;
cbSdkResult ( *cbSdkGetType)(UINT32 nInstance, cbSdkConnectionType * conType, cbSdkInstrumentType * instType) = 0;
cbSdkResult ( *cbSdkClose)(UINT32 nInstance) = 0;
cbSdkResult ( *cbSdkGetTime)(UINT32 nInstance, UINT32 * cbtime) = 0;
cbSdkResult ( *cbSdkGetSpkCache)(UINT32 nInstance, UINT16 channel, cbSPKCACHE **cache) = 0;
cbSdkResult ( *cbSdkGetTrialConfig)(UINT32 nInstance, UINT32 * pbActive, UINT16 * pBegchan, UINT32 * pBegmask, UINT32 * pBegval, UINT16 * pEndchan, UINT32 * pEndmask, UINT32 * pEndval, bool * pbDouble, UINT32 * puWaveforms, UINT32 * puConts, UINT32 * puEvents, UINT32 * puComments, UINT32 * puTrackings, bool * pbAbsolute) = 0;
cbSdkResult ( *cbSdkSetTrialConfig)(UINT32 nInstance, UINT32 bActive, UINT16 begchan, UINT32 begmask, UINT32 begval, UINT16 endchan, UINT32 endmask, UINT32 endval, bool bDouble, UINT32 uWaveforms, UINT32 uConts, UINT32 uEvents, UINT32 uComments, UINT32 uTrackings, bool bAbsolute) = 0;
cbSdkResult ( *cbSdkUnsetTrialConfig)(UINT32 nInstance, cbSdkTrialType type) = 0;
cbSdkResult ( *cbSdkGetChannelLabel)(UINT32 nInstance, UINT16 channel, UINT32 * bValid, char * label, UINT32 * userflags, INT32 * position) = 0;
cbSdkResult ( *cbSdkSetChannelLabel)(UINT32 nInstance, UINT16 channel, const char * label, UINT32 userflags, INT32 * position) = 0;
cbSdkResult ( *cbSdkGetTrialData)(UINT32 nInstance, UINT32 bActive, cbSdkTrialEvent * trialevent, cbSdkTrialCont * trialcont, cbSdkTrialComment * trialcomment, cbSdkTrialTracking * trialtracking) = 0;
cbSdkResult ( *cbSdkInitTrialData)(UINT32 nInstance, cbSdkTrialEvent * trialevent, cbSdkTrialCont * trialcont, cbSdkTrialComment * trialcomment, cbSdkTrialTracking * trialtracking) = 0;
cbSdkResult ( *cbSdkSetFileConfig)(UINT32 nInstance, const char * filename, const char * comment, UINT32 bStart, UINT32 options) = 0;
cbSdkResult ( *cbSdkGetFileConfig)(UINT32 nInstance, char * filename, char * username, bool * pbRecording) = 0;
cbSdkResult ( *cbSdkSetPatientInfo)(UINT32 nInstance, const char * ID, const char * firstname, const char * lastname, UINT32 DOBMonth, UINT32 DOBDay, UINT32 DOBYear) = 0;
cbSdkResult ( *cbSdkInitiateImpedance)(UINT32 nInstance) = 0;
cbSdkResult ( *cbSdkSendPoll)(UINT32 nInstance, const char* appname, UINT32 mode, UINT32 flags, UINT32 extra) = 0;
cbSdkResult ( *cbSdkSendPacket)(UINT32 nInstance, void * ppckt) = 0;
cbSdkResult ( *cbSdkSetSystemRunLevel)(UINT32 nInstance, UINT32 runlevel, UINT32 locked, UINT32 resetque) = 0;
cbSdkResult ( *cbSdkSetDigitalOutput)(UINT32 nInstance, UINT16 channel, UINT16 value) = 0;
cbSdkResult ( *cbSdkSetAnalogOutput)(UINT32 nInstance, UINT16 channel, cbSdkWaveformData * wf, cbSdkAoutMon * mon) = 0;
cbSdkResult ( *cbSdkSetChannelMask)(UINT32 nInstance, UINT16 channel, UINT32 bActive) = 0;
cbSdkResult ( *cbSdkSetComment)(UINT32 nInstance, UINT32 rgba, UINT8 charset, const char * comment) = 0;
cbSdkResult ( *cbSdkSetChannelConfig)(UINT32 nInstance, UINT16 channel, cbPKT_CHANINFO * chaninfo) = 0;
cbSdkResult ( *cbSdkGetChannelConfig)(UINT32 nInstance, UINT16 channel, cbPKT_CHANINFO * chaninfo) = 0;
cbSdkResult ( *cbSdkGetFilterDesc)(UINT32 nInstance, UINT32 proc, UINT32 filt, cbFILTDESC * filtdesc) = 0;
cbSdkResult ( *cbSdkGetSampleGroupList)(UINT32 nInstance, UINT32 proc, UINT32 group, UINT32 *length, UINT32 *list) = 0;
cbSdkResult ( *cbSdkGetTrackObj)(UINT32 nInstance, char *name, UINT16 *type, UINT16 *pointCount, UINT32 id) = 0;
cbSdkResult ( *cbSdkGetVideoSource)(UINT32 nInstance, char *name, float *fps, UINT32 id) = 0;
cbSdkResult ( *cbSdkSetSpikeConfig)(UINT32 nInstance, UINT32 spklength, UINT32 spkpretrig) = 0;
cbSdkResult ( *cbSdkGetSysConfig)(UINT32 nInstance, UINT32 * spklength, UINT32 * spkpretrig, UINT32 * sysfreq) = 0;
cbSdkResult ( *cbSdkSystem)(UINT32 nInstance, cbSdkSystemType cmd) = 0;
cbSdkResult ( *cbSdkRegisterCallback)(UINT32 nInstance, cbSdkCallbackType callbacktype, cbSdkCallback pCallbackFn, void* pCallbackData) = 0;
cbSdkResult ( *cbSdkUnRegisterCallback)(UINT32 nInstance, cbSdkCallbackType callbacktype) = 0;
cbSdkResult ( *cbSdkAnalogToDigital)(UINT32 nInstance, UINT16 channel, const char * szVoltsUnitString, INT32 * digital) = 0;
}

static const Dylib::Import imports[] =
{
  { "cbSdkGetVersion", (void**)&cbSdkGetVersion, Dylib::Import::cMangled },
  { "cbSdkReadCCF", (void**)&cbSdkReadCCF, Dylib::Import::cMangled },
  { "cbSdkWriteCCF", (void**)&cbSdkWriteCCF, Dylib::Import::cMangled },
  { "cbSdkOpen", (void**)&cbSdkOpen, Dylib::Import::cMangled },
  { "cbSdkGetType", (void**)&cbSdkGetType, Dylib::Import::cMangled },
  { "cbSdkClose", (void**)&cbSdkClose, Dylib::Import::cMangled },
  { "cbSdkGetTime", (void**)&cbSdkGetTime, Dylib::Import::cMangled },
  { "cbSdkGetSpkCache", (void**)&cbSdkGetSpkCache, Dylib::Import::cMangled },
  { "cbSdkGetTrialConfig", (void**)&cbSdkGetTrialConfig, Dylib::Import::cMangled },
  { "cbSdkSetTrialConfig", (void**)&cbSdkSetTrialConfig, Dylib::Import::cMangled },
  { "cbSdkUnsetTrialConfig", (void**)&cbSdkUnsetTrialConfig, Dylib::Import::cMangled },
  { "cbSdkGetChannelLabel", (void**)&cbSdkGetChannelLabel, Dylib::Import::cMangled },
  { "cbSdkSetChannelLabel", (void**)&cbSdkSetChannelLabel, Dylib::Import::cMangled },
  { "cbSdkGetTrialData", (void**)&cbSdkGetTrialData, Dylib::Import::cMangled },
  { "cbSdkInitTrialData", (void**)&cbSdkInitTrialData, Dylib::Import::cMangled },
  { "cbSdkSetFileConfig", (void**)&cbSdkSetFileConfig, Dylib::Import::cMangled },
  { "cbSdkGetFileConfig", (void**)&cbSdkGetFileConfig, Dylib::Import::cMangled },
  { "cbSdkSetPatientInfo", (void**)&cbSdkSetPatientInfo, Dylib::Import::cMangled },
  { "cbSdkInitiateImpedance", (void**)&cbSdkInitiateImpedance, Dylib::Import::cMangled },
  { "cbSdkSendPoll", (void**)&cbSdkSendPoll, Dylib::Import::cMangled },
  { "cbSdkSendPacket", (void**)&cbSdkSendPacket, Dylib::Import::cMangled },
  { "cbSdkSetSystemRunLevel", (void**)&cbSdkSetSystemRunLevel, Dylib::Import::cMangled },
  { "cbSdkSetDigitalOutput", (void**)&cbSdkSetDigitalOutput, Dylib::Import::cMangled },
  { "cbSdkSetAnalogOutput", (void**)&cbSdkSetAnalogOutput, Dylib::Import::cMangled },
  { "cbSdkSetChannelMask", (void**)&cbSdkSetChannelMask, Dylib::Import::cMangled },
  { "cbSdkSetComment", (void**)&cbSdkSetComment, Dylib::Import::cMangled },
  { "cbSdkSetChannelConfig", (void**)&cbSdkSetChannelConfig, Dylib::Import::cMangled },
  { "cbSdkGetChannelConfig", (void**)&cbSdkGetChannelConfig, Dylib::Import::cMangled },
  { "cbSdkGetFilterDesc", (void**)&cbSdkGetFilterDesc, Dylib::Import::cMangled },
  { "cbSdkGetSampleGroupList", (void**)&cbSdkGetSampleGroupList, Dylib::Import::cMangled },
  { "cbSdkGetTrackObj", (void**)&cbSdkGetTrackObj, Dylib::Import::cMangled },
  { "cbSdkGetVideoSource", (void**)&cbSdkGetVideoSource, Dylib::Import::cMangled },
  { "cbSdkSetSpikeConfig", (void**)&cbSdkSetSpikeConfig, Dylib::Import::cMangled },
  { "cbSdkGetSysConfig", (void**)&cbSdkGetSysConfig, Dylib::Import::cMangled },
  { "cbSdkSystem", (void**)&cbSdkSystem, Dylib::Import::cMangled },
  { "cbSdkRegisterCallback", (void**)&cbSdkRegisterCallback, Dylib::Import::cMangled },
  { "cbSdkUnRegisterCallback", (void**)&cbSdkUnRegisterCallback, Dylib::Import::cMangled },
  { "cbSdkAnalogToDigital", (void**)&cbSdkAnalogToDigital, Dylib::Import::cMangled },
  { 0, 0, 0 }
};

#endif // DYNAMIC_IMPORTS

// Here you may specify a custom error message to be displayed when the library cannot be found.
static const char* notFoundMsg = 
	"The cbsdk library has not been found. "
	"That library is necessary to connect to the Blackrock amplifier.\n";
// Here you may specify an URL to some local or remote help resource.
static const char* notFoundURL = "http://www.github.com/dashesy/CereLink";
RegisterDylib( cbsdk, imports, notFoundMsg, notFoundURL );

