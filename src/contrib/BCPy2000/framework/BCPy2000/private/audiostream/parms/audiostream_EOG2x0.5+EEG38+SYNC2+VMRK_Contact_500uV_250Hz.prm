System:Configuration matrix OperatorVersion= { Framework Revision Build } 1 2.x % Oct%2021%202008 // operator module version information
System:State%20Vector int StateVectorLength= 15 16 1 30 // length of the state vector in bytes
Source:Signal%20Properties:DataIOFilter int SourceCh= 43 16 1 % // number of digitized and stored channels
Source:Signal%20Properties:DataIOFilter int SampleBlockSize= 10 32 1 % // number of samples transmitted at a time
Source:Signal%20Properties:DataIOFilter int SamplingRate= 250Hz 256Hz 1 % // sample rate
Source:Signal%20Properties:DataIOFilter list ChannelNames= 43 EL1 EO1 Oz O9 O10 PO7 PO8 P7 P3 P4 P8 CP5 CP1 CP2 CP6 T7 C5 C3 C1 C2 C4 C6 T8 FT9 FC5 FC1 FC2 FC6 FT10 F7 F3 Fz F4 F8 Fp1 Fpz Fp2 Cz Pz A2 LAUD RAUD VMRK // list of channel names
Source:Signal%20Properties:DataIOFilter floatlist SourceChOffset= 43 2.6677 -40.297 -6.7305 3.9498 -5.8804 6.1602 -11.68 -12.637 -3.1021 1.2742 7.1399 -7.2966 -10.185 -6.5861 2.6857 -4.368 -13.735 -18.553 -2.8037 -4.611 -10.422 -4.0573 -4.5506 -5.241 -13.944 -4.8695 -20.513 -3.4209 -3.6525 -12.4 -8.6338 -14.978 -2.7602 -7.5187 -18.304 -13.227 -1.3733 -2.7497 1.3024 -2.4509 0.026 0.0259 0.0259 0 % % // Offset for channels in A/D units
Source:Signal%20Properties:DataIOFilter floatlist SourceChGain= 43 0.0264 0.0265 0.0133 0.0136 0.0132 0.0135 0.0134 0.0134 0.0141 0.0139 0.0141 0.014 0.014 0.0139 0.0141 0.0139 0.0139 0.0141 0.0138 0.0139 0.014 0.0142 0.0141 0.014 0.0134 0.013 0.0132 0.0134 0.0131 0.0132 0.0134 0.0132 0.014 0.0137 0.0139 0.0138 0.0135 0.0137 0.0138 0.0138 0.000304 0.000304 0.000304 0.003 % % // gain for each channel (A/D units -> muV)
Storage:Data%20Location:DataIOFilter string DataDirectory= ..\data ..\data % % // path to top level data directory (directory)
Storage:Session:DataIOFilter string SubjectName= AUDIOSTREAM_ Name % % // subject alias
Storage:Session:DataIOFilter string SubjectSession= 001 001 % % // three-digit session number
Storage:Session:DataIOFilter string SubjectRun= 00 00 % % // two-digit run number
Storage:Documentation:DataIOFilter string ID_System= % // BCI2000 System Code
Storage:Documentation:DataIOFilter string ID_Amp= % // BCI2000 Amp Code
Storage:Documentation:DataIOFilter string ID_Montage= % // BCI2000 Cap Montage Code
Visualize:Timing:DataIOFilter int VisualizeTiming= 0 1 0 1 // visualize system timing (0=no, 1=yes) (boolean)
Visualize:Source%20Signal:DataIOFilter int VisualizeSource= 1 1 0 1 // visualize raw brain signal (0=no, 1=yes) (boolean)
Visualize:Source%20Signal:DataIOFilter int VisualizeSourceDecimation= 1 1 1 % // decimation factor for raw brain signal
Visualize:Source%20Signal:DataIOFilter int VisualizeSourceTime= 10 2 0 % // how much time in Source visualization
Visualize:Source%20Signal:DataIOFilter int SourceMin= -2muV -100muV % % // raw signal vis Min Value
Visualize:Source%20Signal:DataIOFilter int SourceMax= 2muV 100muV % % // raw signal vis Max Value
Source:TDAS_ADC int BoardNumber= 0 0 0 0 // Number of A/D Board as displayed by the InstaCal program
Source:TDAS_ADC floatlist ADRange= { min max } -10 10 0 % % // A/D input range in Volts, e.g. -5 5 or 0 10 (only certain values are supported)
Storage:Documentation:BCI2000FileWriter int SavePrmFile= 0 1 0 1 // save additional parameter file (0=no, 1=yes) (boolean)
Storage:Documentation:BCI2000FileWriter string StorageTime= % // time of beginning of data storage
Source:Alignment:AlignmentFilter int AlignChannels= 0 0 0 1 // align channels in time (0=no, 1=yes)
Source:Alignment:AlignmentFilter floatlist SourceChTimeOffset= 0 0 % % // time offsets for all source channels (may be empty)
Source:Online%20Processing:TransmissionFilter list TransmitChList= 43 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 // list of transmitted channels
System:Core%20Connections string SignalSourcePort= 1990 4200 1024 65535 // the SignalSource module's listening port
System:Core%20Connections string SignalSourceIP= 10.38.124.230 127.0.0.1 % % // the SignalSource module's listening IP
System:Configuration matrix SignalSourceVersion= { Framework Revision Build } 1 2.x % Oct%2023%202008 // SignalSource version information
System:Configuration matrix SignalSourceFilterChain= 8 { Filter%20Name Position%20String } DataIOFilter 0 TDAS_ADC 1 NullFileWriter 1 BCI2000FileWriter 1 GDFFileWriter 1 EDFFileWriter 1 AlignmentFilter 1.1 TransmissionFilter 1.2 // SignalSource filter chain
Visualize:Processing%20Stages int VisualizeAlignmentFilter= 0 0 0 1 // Visualize AlignmentFilter output (boolean)
Visualize:Processing%20Stages int VisualizeTransmissionFilter= 0 0 0 1 // Visualize TransmissionFilter output (boolean)
Filtering:SpatialFilter int SpatialFilterType= 0 2 0 3 // spatial filter type 0: none, 1: full matrix, 2: sparse matrix, 3: common average reference (CAR) (enumeration)
Filtering:SpatialFilter:SpatialFilter intlist SpatialFilterCAROutput= 0 // list of output channels for the CAR if used
Filtering:SpatialFilter:SpatialFilter matrix SpatialFilter= 4 4 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 % % // columns represent input channels, rows represent output channels
System:Command%20Line%20Arguments variant PythonSigWD= c:\users\battes\bci\code\bci2000\jez\audiostream\python 0 0 0 
System:Command%20Line%20Arguments variant PythonSigFramework= c:\users\battes\bci\code\bci2000\mirror\trunk\src\contrib\BCPy2000\framework 0 0 0 
System:Command%20Line%20Arguments variant PythonSigShell= 1 0 0 0 
System:Command%20Line%20Arguments variant PythonSigLog= ..\log\###-sig.txt 0 0 0 
System:Command%20Line%20Arguments variant PythonSigDLL= python25 0 0 0 
PythonSig string SignalProcessingDescription= implement%20the%20Description(self)%20hook%20to%20supply%20a%20description%20of%20what%20this%20module%20does % a z // Identifies the signal processing module
PythonSig:Epoch floatlist EpochLowerBoundMsec= 2 100 100 100 0 % // after springing, each ERP trap will not spring again for this many milliseconds
PythonSig:Epoch list TriggerChannels= 2 LAUD RAUD 
PythonSig:Epoch floatlist TriggerThreshold= 2 0.1 0.1 % 0 % 
PythonSig:Epoch floatlist ERPFilterFreqHz= 2 0.1 8 % 0 % // lower and upper frequencies of bandpass filter for ERP feature set
PythonSig:Epoch int ERPFilterOrder= 8 8 0 % // order of bandpass filter for ERP feature set
PythonSig:Epoch float ERPClassifierBias= 0.0 0.0 % % 
PythonSig:Epoch matrix ERPClassifierWeights= 0 1 
PythonSig:Epoch int DiffFeatureSets= 1 1 0 1 // for 2-stream designs, whether to use the difference between the two feature sets (boolean)
PythonSig:Epoch intlist DiscardEpochs= 2 2 2 2 0 % // for classification, discard this many epochs at the beginning
System:Core%20Connections string SignalProcessingPort= 1987 4200 1024 65535 // the SignalProcessing module's listening port
System:Core%20Connections string SignalProcessingIP= 10.38.124.230 127.0.0.1 % % // the SignalProcessing module's listening IP
System:Configuration matrix SignalProcessingVersion= { Framework Revision Build } 1 2.x % Oct%2023%202008 // SignalProcessing version information
System:Configuration matrix SignalProcessingFilterChain= 2 { Filter%20Name Position%20String } SpatialFilter 2.B PythonSigFilter 2.C // SignalProcessing filter chain
Visualize:Processing%20Stages int VisualizeSpatialFilter= 0 0 0 1 // Visualize SpatialFilter output (boolean)
Visualize:Processing%20Stages int VisualizePythonSigFilter= 0 0 0 1 // Visualize PythonSigFilter output (boolean)
Source:Signal%20Properties:DataIOFilter list ReferenceChannelName= 1 A1 % % a // list of labels for reference channel or channels
Source:Signal%20Properties:DataIOFilter list GroundChannelName= 1 FCz % % a // label of the ground channel
Source:Playback int EnslavePython= 0 0 0 1 // force BCPy2000 modules to follow states supplied by the source module without being able to change them (boolean)
System:Command%20Line%20Arguments variant PythonAppWD= c:\users\battes\bci\code\bci2000\jez\audiostream\python 0 0 0 
System:Command%20Line%20Arguments variant PythonAppFramework= c:\users\battes\bci\code\bci2000\mirror\trunk\src\contrib\BCPy2000\framework 0 0 0 
System:Command%20Line%20Arguments variant PythonAppShell= 1 0 0 0 
System:Command%20Line%20Arguments variant PythonAppLog= ..\log\###-app.txt 0 0 0 
System:Command%20Line%20Arguments variant PythonAppDLL= python25 0 0 0 
PythonApp string ApplicationDescription= attention%20to%20auditory%20streams % a z // Identifies the stimulus presentation module
PythonApp int ShowSignalTime= 1 0 0 1 // show a timestamp based on the number of processed samples (boolean)
PythonApp:Design int TrialsPerBlock= 2 20 1 % // number of trials in one block
PythonApp:Design int BlocksPerRun= 1 20 1 % // number of sub-blocks in one run
PythonApp int FreeChoice= 0 1 0 1 // allow user to choose freely (boolean)
PythonApp:Streams int NumberOfStreams= 2 2 2 2 // number of streams
PythonApp:Streams float EpochDurationMsec= 600 600 100 % 
PythonApp:Streams float MinPropTargets= 0.1 0.1 0 1 // minimum number of targets, as a proportion of the largest number of variable beats among streams
PythonApp:Streams float MaxPropTargets= 0.8 0.8 0 1 // maximum number of targets, as a proportion of the smallest number of variable beats among streams
PythonApp:Streams floatlist PeriodMsec= 2 490 555 500 0 % // period of stimuli for each stream in msec
PythonApp:Streams floatlist OffsetMsec= 2 500 570 0 0 % // offset of each stimulus stream in msec
PythonApp:Streams floatlist InitialStandards= 2 3 3 3 0 % // how many stimuli at the beginning of each stream are guaranteed to be standards
PythonApp:Streams intlist NumberOfDeviants= 2 0 0 0 0 1 // number of deviants in each stream
PythonApp:Streams int IntegerCarrierCyclesPerBeat= 0 1 0 1 // round carrier frequencies to ensure an integer number of cycles per beat (boolean)
PythonApp:Streams int IntegerModCyclesPerBeat= 1 1 0 1 // round modulation frequencies to ensure an integer number of cycles per beat (boolean)
PythonApp:Streams matrix Amplitude= { Background Standard Target Deviant } 2 0.0 0.0 1.0 0.9 1.0 0.9 1.0 0.9 1.0 0.0 1.0 // amplitude of each stimulus (types by streams)
PythonApp:Streams matrix DurationMsec= { Background Standard Target Deviant } 2 5000.0 5000.0 50.0 50.0 50.0 50.0 50.0 50.0 50.0 0.0 % // duration of each stimulus pulse (types by streams)
PythonApp:Streams matrix AttackMsec= { Background Standard Target Deviant } 2 250.0 250.0 5.0 5.0 5.0 5.0 5.0 5.0 5.0 0.0 % // rise time of each stimulus pulse (types by streams)
PythonApp:Streams matrix DecayMsec= { Background Standard Target Deviant } 2 100.0 100.0 5.0 5.0 5.0 5.0 5.0 5.0 5.0 0.0 % // fall time of each stimulus pulse (types by streams)
PythonApp:Streams matrix CarrierType= { Background Standard Target Deviant } 2 square square square square square square square square square % % // (types by streams)
PythonApp:Streams matrix CarrierFreqHz= { Background Standard Target Deviant } 2 1500.0 800.0 1500.0 800.0 1650.0 880.0 1500.0 800.0 800.0 0.0 % // (types by streams)
PythonApp:Streams matrix ModulationType= { Background Standard Target Deviant } 2 sine sine sine sine sine sine sine sine sine % % // (types by streams)
PythonApp:Streams matrix ModulationFreqHz= { Background Standard Target Deviant } 2 45.0 62.0 45.0 62.0 45.0 62.0 45.0 62.0 45.0 % % // (types by streams)
PythonApp:Streams matrix ModulationDepth= { Background Standard Target Deviant } 2 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 // (types by streams)
PythonApp:Streams matrix AudioMixingMatrix= 2 2 1.0 0.0 0.0 1.0 1.0 % % // audio mixing matrix (outputs by inputs)
System:Core%20Connections string ApplicationPort= 1989 4200 1024 65535 // the Application module's listening port
System:Core%20Connections string ApplicationIP= 10.38.124.230 127.0.0.1 % % // the Application module's listening IP
System:Configuration matrix ApplicationVersion= { Framework Revision Build } 1 2.x % Oct%2023%202008 // Application version information
System:Configuration matrix ApplicationFilterChain= 1 { Filter%20Name Position%20String } PythonAppFilter 3 // Application filter chain
Visualize:Processing%20Stages int VisualizePythonAppFilter= 0 0 0 1 // Visualize PythonAppFilter output (boolean)
