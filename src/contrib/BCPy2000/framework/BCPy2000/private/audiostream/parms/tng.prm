PythonSig:Streams                             int       NumberOfStreams=          2                     //
PythonApp:Streams                             floatlist PeriodMsec=               2     500      500    // period of stimuli for each stream in msec
PythonApp:Streams                             floatlist OffsetMsec=               2       0      250    // offset of each stimulus stream in msec
PythonSig:Streams                             intlist   InitialStandards=         2       2        2    // how many stimuli at the beginning of each stream are guaranteed to be standards
PythonSig:Streams                             intlist   MinTargets=               2       1        1    // 
PythonSig:Streams                             intlist   MaxTargets=               2       3        3    // 
PythonSig:Streams                             intlist   ScopeForMinMax=           2       7        7    // 
PythonSig:Streams                             floatlist StreamVolumes=            2       0.02     0.02 //
PythonSig:Streams                             matrix    StreamStimuli=          2 { Standard Target } ../sounds/8500/8500LeftStandard.wav ../sounds/8500/8500LeftTarget.wav   ../sounds/8500/8500RightStandard.wav ../sounds/8500/8500RightTarget.wav  //
PythonSig:Streams                             int       SurroundSoundTrigger=             1             // if checked, deliver the trigger signal in sound channels 3 and 4 (boolean)
PythonSig:Streams                             matrix    SoundChannels=          6 9       1 % % % % % % % S1     % 1 % % % % % % S2     % % % % % % 1 % T1     % % % % % % % 1 T2     1 % % % 1 % % % F     % 1 % % % 1 % % F  //
PythonSig:Streams                             int       DirectSound=                      1             // use DirectSound interface or not? (boolean)

Visualize:Processing%20Stages                 int       VisualizeTiming=                  1             // 
Visualize:Processing%20Stages                 int       VisualizeSource=                  1             // Visualize raw brain signal (boolean)
Visualize:Source%20Signal:DataIOFilter        int       SourceMin=                       -50muV         // raw signal vis Min Value
Visualize:Source%20Signal:DataIOFilter        int       SourceMax=                        50muV         // raw signal vis Max Value
Visualize:Processing%20Stages                 int       VisualizePythonSigFilter=         1             // Visualize PythonSigFilter output (boolean)
                
Filtering:SpatialFilter                       int       SpatialFilterType=                0             // spatial filter type 0: none, 1: full matrix, 2: sparse matrix, 3: common average reference (CAR) (enumeration)
PythonSig:Epoch                               list      TriggerChannels=          2    AUDL     AUDR    // 
PythonSig:Epoch                               floatlist TriggerThreshold=         2   50000    50000    // 
PythonSig:Epoch                               float     TriggerHPCutoff=                  0.0           // 
PythonSig:Epoch                               float     TriggerHPOrder=                   4             // 
PythonSig:Epoch                               float     TriggerlessOffsetMsec=           50.0           // used to compensate for stimulus output latency to make weights from triggered and triggerless versions as compatible as possible
PythonSig:Epoch                               floatlist EpochLowerBoundMsec=      2     400      400    // after springing, each ERP trap will not spring again for this many milliseconds
PythonSig:Epoch                               int       ERPFilterOrder=                   6             // order of bandpass filter for ERP feature set
PythonSig:Epoch                               floatlist ERPFilterFreqHz=          2       0.1    8.0    // lower and upper frequencies of bandpass filter for ERP feature set
PythonSig:Epoch                               float     EpochDurationMsec=              600             // 
PythonSig:Epoch                               intlist   DiscardEpochs=            2       2      2      // for classification, discard this many epochs at the beginning
PythonSig:Epoch                               int       DetrendEpochs=                    2             // Detrend data? 0: no, 1: mean, 2: linear (enumeration)",
PythonSig:Epoch                               int       DiffFeatureSets=                  1             // for 2-stream designs, whether to use the difference between the two feature sets (boolean)
PythonSig:Epoch                               float     ERPClassifierBias=                0.0           // 
PythonSig:Epoch                               matrix    ERPClassifierWeights=   0 1       %             // 
PythonSig:Epoch                               int       SaveTrainingData=                 1             // 

PythonSig:Control                             float     EpochAveragingPersistence=        0.7           // persistence parameter for the running average of ERPs
PythonSig:Control                             float     ControlFilterCutoffHz=            3.0           // output low-pass cutoff in Hz (0 to disable)
PythonSig:Control                             int       ControlFilterOrder=               8             // 

  
Source:Playback                               int       EnslavePython=                    0             // force BCPy2000 modules to follow states supplied by the source module without being able to change them (boolean)
   