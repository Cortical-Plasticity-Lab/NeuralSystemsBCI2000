// Import declarations for gUSBamp.h, generated by dylib_imports.sh
#ifndef gUSBamp_IMPORTS_H
#define gUSBamp_IMPORTS_H

#include "Win32Defs.h"

#if DYNAMIC_IMPORTS
#define GT_GetDriverVersion GT_GetDriverVersion_89e5
#define GT_OpenDevice GT_OpenDevice_306c
#define GT_OpenDeviceEx GT_OpenDeviceEx_6e94
#define GT_CloseDevice GT_CloseDevice_e5f9
#define GT_GetData GT_GetData_c54e
#define GT_SetBufferSize GT_SetBufferSize_34da
#define GT_SetSampleRate GT_SetSampleRate_ca1d
#define GT_Start GT_Start_f497
#define GT_Stop GT_Stop_cce8
#define GT_SetChannels GT_SetChannels_48fa
#define GT_SetDigitalOut GT_SetDigitalOut_ce16
#define GT_GetDigitalIO GT_GetDigitalIO_19a9
#define GT_GetLastError GT_GetLastError_bc18
#define GT_ResetTransfer GT_ResetTransfer_cadc
#define GT_GetSerial GT_GetSerial_4e25
#define GT_VR GT_VR_b5ed
#define GT_EnableTriggerLine GT_EnableTriggerLine_5c57
#define GT_GetImpedance GT_GetImpedance_04f1
#define GT_Calibrate GT_Calibrate_fd17
#define GT_SetScale GT_SetScale_1ae0
#define GT_GetScale GT_GetScale_209a
#define GT_GetFilterSpec GT_GetFilterSpec_08ec
#define GT_GetNumberOfFilter GT_GetNumberOfFilter_97f8
#define GT_SetBandPass GT_SetBandPass_572b
#define GT_GetNotchSpec GT_GetNotchSpec_9cb1
#define GT_GetNumberOfNotch GT_GetNumberOfNotch_14d0
#define GT_SetNotch GT_SetNotch_ad81
#define GT_SetMode GT_SetMode_51d0
#define GT_GetMode GT_GetMode_2353
#define GT_SetGround GT_SetGround_faf6
#define GT_GetGround GT_GetGround_9897
#define GT_SetReference GT_SetReference_b045
#define GT_GetReference GT_GetReference_250f
#define GT_SetBipolar GT_SetBipolar_0fb4
#define GT_SetDRLChannel GT_SetDRLChannel_17c8
#define GT_EnableSC GT_EnableSC_7ba7
#define GT_SetSlave GT_SetSlave_a3f8
#define GT_SetDAC GT_SetDAC_63b5
#endif // DYNAMIC_IMPORTS

#include "gUSBamp.h"

#if DYNAMIC_IMPORTS
#undef GT_GetDriverVersion
#undef GT_OpenDevice
#undef GT_OpenDeviceEx
#undef GT_CloseDevice
#undef GT_GetData
#undef GT_SetBufferSize
#undef GT_SetSampleRate
#undef GT_Start
#undef GT_Stop
#undef GT_SetChannels
#undef GT_SetDigitalOut
#undef GT_GetDigitalIO
#undef GT_GetLastError
#undef GT_ResetTransfer
#undef GT_GetSerial
#undef GT_VR
#undef GT_EnableTriggerLine
#undef GT_GetImpedance
#undef GT_Calibrate
#undef GT_SetScale
#undef GT_GetScale
#undef GT_GetFilterSpec
#undef GT_GetNumberOfFilter
#undef GT_SetBandPass
#undef GT_GetNotchSpec
#undef GT_GetNumberOfNotch
#undef GT_SetNotch
#undef GT_SetMode
#undef GT_GetMode
#undef GT_SetGround
#undef GT_GetGround
#undef GT_SetReference
#undef GT_GetReference
#undef GT_SetBipolar
#undef GT_SetDRLChannel
#undef GT_EnableSC
#undef GT_SetSlave
#undef GT_SetDAC

extern "C" {
extern FLOAT (__stdcall *GT_GetDriverVersion)(void);
extern HANDLE (__stdcall *GT_OpenDevice)(int iPortNumber);
extern HANDLE (__stdcall *GT_OpenDeviceEx)(LPSTR lpSerial);
extern BOOL (__stdcall *GT_CloseDevice)(HANDLE *hDevice);
extern BOOL (__stdcall *GT_GetData)(HANDLE hDevice, BYTE *pData, DWORD dwSzBuffer, OVERLAPPED *ov);
extern BOOL (__stdcall *GT_SetBufferSize)(HANDLE hDevice, WORD wBufferSize);
extern BOOL (__stdcall *GT_SetSampleRate)(HANDLE hDevice, WORD wSampleRate);
extern BOOL (__stdcall *GT_Start)(HANDLE hDevice);
extern BOOL (__stdcall *GT_Stop)(HANDLE hDevice);
extern BOOL (__stdcall *GT_SetChannels)(HANDLE hDevice, UCHAR *ucChannels, UCHAR ucSizeChannels);
extern BOOL (__stdcall *GT_SetDigitalOut)(HANDLE hDevice, UCHAR ucNumber, UCHAR ucValue);
extern BOOL (__stdcall *GT_GetDigitalIO)(HANDLE hDevice, PDigitalIO pDIO);
extern BOOL (__stdcall *GT_GetLastError)(WORD * wErrorCode, char *pLastError);
extern BOOL (__stdcall *GT_ResetTransfer)(HANDLE hDevice);
extern BOOL (__stdcall *GT_GetSerial)(HANDLE hDevice, LPSTR lpstrSerial,UINT uiSize);
extern BOOL (__stdcall *GT_VR)(int nargin, void *varargin[],int nargout, void *varargout[]);
extern BOOL (__stdcall *GT_EnableTriggerLine)(HANDLE hDevice, BOOL bEnable);
extern BOOL (__stdcall *GT_GetImpedance)(HANDLE hDevice, UCHAR Channel, double* Impedance);
extern BOOL (__stdcall *GT_Calibrate)(HANDLE hDevice,PSCALE Scaling);
extern BOOL (__stdcall *GT_SetScale)(HANDLE hDevice, PSCALE Scaling);
extern BOOL (__stdcall *GT_GetScale)(HANDLE hDevice, PSCALE Scaling);
extern BOOL (__stdcall *GT_GetFilterSpec)(FILT *FilterSpec);
extern BOOL (__stdcall *GT_GetNumberOfFilter)(int* nof);
extern BOOL (__stdcall *GT_SetBandPass)(HANDLE hDevice, UCHAR ucChannel, int index);
extern BOOL (__stdcall *GT_GetNotchSpec)(FILT *FilterSpec);
extern BOOL (__stdcall *GT_GetNumberOfNotch)(int* nof);
extern BOOL (__stdcall *GT_SetNotch)(HANDLE hDevice, UCHAR ucChannel, int index);
extern BOOL (__stdcall *GT_SetMode)(HANDLE hDevice, UCHAR ucMode);
extern BOOL (__stdcall *GT_GetMode)(HANDLE hDevice, UCHAR* ucMode);
extern BOOL (__stdcall *GT_SetGround)(HANDLE hDevice, GND CommonGround);
extern BOOL (__stdcall *GT_GetGround)(HANDLE hDevice, GND* CommonGround);
extern BOOL (__stdcall *GT_SetReference)(HANDLE hDevice, REF CommonReference);
extern BOOL (__stdcall *GT_GetReference)(HANDLE hDevice, REF* CommonReference);
extern BOOL (__stdcall *GT_SetBipolar)(HANDLE hDevice, CHANNEL bipoChannel);
extern BOOL (__stdcall *GT_SetDRLChannel)(HANDLE hDevice, CHANNEL drlChannel);
extern BOOL (__stdcall *GT_EnableSC)(HANDLE hDevice, BOOL bEnable);
extern BOOL (__stdcall *GT_SetSlave)(HANDLE hDevice, BOOL bSlave);
extern BOOL (__stdcall *GT_SetDAC)(HANDLE hDevice, DAC AnalogOut);
}
#endif // DYNAMIC_IMPORTS

namespace Dylib { bool gUSBamp_Loaded(); }

#endif // gUSBamp_IMPORTS_H
