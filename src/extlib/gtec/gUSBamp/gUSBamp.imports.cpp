// Import definitions for gUSBamp.h, generated by dylib_imports.sh
#include "gUSBamp.imports.h"
#include "DylibImports.h"

#if !DYNAMIC_IMPORTS

namespace Dylib { bool gUSBamp_Loaded() { return true; } }

#else // DYNAMIC_IMPORTS

extern "C" {
FLOAT (__stdcall *GT_GetDriverVersion)(void) = 0;
HANDLE (__stdcall *GT_OpenDevice)(int iPortNumber) = 0;
HANDLE (__stdcall *GT_OpenDeviceEx)(LPSTR lpSerial) = 0;
BOOL (__stdcall *GT_CloseDevice)(HANDLE *hDevice) = 0;
BOOL (__stdcall *GT_GetData)(HANDLE hDevice, BYTE *pData, DWORD dwSzBuffer, OVERLAPPED *ov) = 0;
BOOL (__stdcall *GT_SetBufferSize)(HANDLE hDevice, WORD wBufferSize) = 0;
BOOL (__stdcall *GT_SetSampleRate)(HANDLE hDevice, WORD wSampleRate) = 0;
BOOL (__stdcall *GT_Start)(HANDLE hDevice) = 0;
BOOL (__stdcall *GT_Stop)(HANDLE hDevice) = 0;
BOOL (__stdcall *GT_SetChannels)(HANDLE hDevice, UCHAR *ucChannels, UCHAR ucSizeChannels) = 0;
BOOL (__stdcall *GT_SetDigitalOut)(HANDLE hDevice, UCHAR ucNumber, UCHAR ucValue) = 0;
BOOL (__stdcall *GT_GetDigitalIO)(HANDLE hDevice, PDigitalIO pDIO) = 0;
BOOL (__stdcall *GT_GetLastError)(WORD * wErrorCode, char *pLastError) = 0;
BOOL (__stdcall *GT_ResetTransfer)(HANDLE hDevice) = 0;
BOOL (__stdcall *GT_GetSerial)(HANDLE hDevice, LPSTR lpstrSerial,UINT uiSize) = 0;
BOOL (__stdcall *GT_VR)(int nargin, void *varargin[],int nargout, void *varargout[]) = 0;
BOOL (__stdcall *GT_EnableTriggerLine)(HANDLE hDevice, BOOL bEnable) = 0;
BOOL (__stdcall *GT_GetImpedance)(HANDLE hDevice, UCHAR Channel, double* Impedance) = 0;
BOOL (__stdcall *GT_Calibrate)(HANDLE hDevice,PSCALE Scaling) = 0;
BOOL (__stdcall *GT_SetScale)(HANDLE hDevice, PSCALE Scaling) = 0;
BOOL (__stdcall *GT_GetScale)(HANDLE hDevice, PSCALE Scaling) = 0;
BOOL (__stdcall *GT_GetFilterSpec)(FILT *FilterSpec) = 0;
BOOL (__stdcall *GT_GetNumberOfFilter)(int* nof) = 0;
BOOL (__stdcall *GT_SetBandPass)(HANDLE hDevice, UCHAR ucChannel, int index) = 0;
BOOL (__stdcall *GT_GetNotchSpec)(FILT *FilterSpec) = 0;
BOOL (__stdcall *GT_GetNumberOfNotch)(int* nof) = 0;
BOOL (__stdcall *GT_SetNotch)(HANDLE hDevice, UCHAR ucChannel, int index) = 0;
BOOL (__stdcall *GT_SetMode)(HANDLE hDevice, UCHAR ucMode) = 0;
BOOL (__stdcall *GT_GetMode)(HANDLE hDevice, UCHAR* ucMode) = 0;
BOOL (__stdcall *GT_SetGround)(HANDLE hDevice, GND CommonGround) = 0;
BOOL (__stdcall *GT_GetGround)(HANDLE hDevice, GND* CommonGround) = 0;
BOOL (__stdcall *GT_SetReference)(HANDLE hDevice, REF CommonReference) = 0;
BOOL (__stdcall *GT_GetReference)(HANDLE hDevice, REF* CommonReference) = 0;
BOOL (__stdcall *GT_SetBipolar)(HANDLE hDevice, CHANNEL bipoChannel) = 0;
BOOL (__stdcall *GT_SetDRLChannel)(HANDLE hDevice, CHANNEL drlChannel) = 0;
BOOL (__stdcall *GT_EnableSC)(HANDLE hDevice, BOOL bEnable) = 0;
BOOL (__stdcall *GT_SetSlave)(HANDLE hDevice, BOOL bSlave) = 0;
BOOL (__stdcall *GT_SetDAC)(HANDLE hDevice, DAC AnalogOut) = 0;
}

static const Dylib::Import imports[] =
{
  { "GT_GetDriverVersion", (void**)&GT_GetDriverVersion, Dylib::Import::cMangled },
  { "GT_OpenDevice", (void**)&GT_OpenDevice, Dylib::Import::cMangled },
  { "GT_OpenDeviceEx", (void**)&GT_OpenDeviceEx, Dylib::Import::cMangled },
  { "GT_CloseDevice", (void**)&GT_CloseDevice, Dylib::Import::cMangled },
  { "GT_GetData", (void**)&GT_GetData, Dylib::Import::cMangled },
  { "GT_SetBufferSize", (void**)&GT_SetBufferSize, Dylib::Import::cMangled },
  { "GT_SetSampleRate", (void**)&GT_SetSampleRate, Dylib::Import::cMangled },
  { "GT_Start", (void**)&GT_Start, Dylib::Import::cMangled },
  { "GT_Stop", (void**)&GT_Stop, Dylib::Import::cMangled },
  { "GT_SetChannels", (void**)&GT_SetChannels, Dylib::Import::cMangled },
  { "GT_SetDigitalOut", (void**)&GT_SetDigitalOut, Dylib::Import::cMangled },
  { "GT_GetDigitalIO", (void**)&GT_GetDigitalIO, Dylib::Import::cMangled },
  { "GT_GetLastError", (void**)&GT_GetLastError, Dylib::Import::cMangled },
  { "GT_ResetTransfer", (void**)&GT_ResetTransfer, Dylib::Import::cMangled },
  { "GT_GetSerial", (void**)&GT_GetSerial, Dylib::Import::cMangled },
  { "GT_VR", (void**)&GT_VR, Dylib::Import::cMangled },
  { "GT_EnableTriggerLine", (void**)&GT_EnableTriggerLine, Dylib::Import::cMangled },
  { "GT_GetImpedance", (void**)&GT_GetImpedance, Dylib::Import::cMangled },
  { "GT_Calibrate", (void**)&GT_Calibrate, Dylib::Import::cMangled },
  { "GT_SetScale", (void**)&GT_SetScale, Dylib::Import::cMangled },
  { "GT_GetScale", (void**)&GT_GetScale, Dylib::Import::cMangled },
  { "GT_GetFilterSpec", (void**)&GT_GetFilterSpec, Dylib::Import::cMangled },
  { "GT_GetNumberOfFilter", (void**)&GT_GetNumberOfFilter, Dylib::Import::cMangled },
  { "GT_SetBandPass", (void**)&GT_SetBandPass, Dylib::Import::cMangled },
  { "GT_GetNotchSpec", (void**)&GT_GetNotchSpec, Dylib::Import::cMangled },
  { "GT_GetNumberOfNotch", (void**)&GT_GetNumberOfNotch, Dylib::Import::cMangled },
  { "GT_SetNotch", (void**)&GT_SetNotch, Dylib::Import::cMangled },
  { "GT_SetMode", (void**)&GT_SetMode, Dylib::Import::cMangled },
  { "GT_GetMode", (void**)&GT_GetMode, Dylib::Import::cMangled },
  { "GT_SetGround", (void**)&GT_SetGround, Dylib::Import::cMangled },
  { "GT_GetGround", (void**)&GT_GetGround, Dylib::Import::cMangled },
  { "GT_SetReference", (void**)&GT_SetReference, Dylib::Import::cMangled },
  { "GT_GetReference", (void**)&GT_GetReference, Dylib::Import::cMangled },
  { "GT_SetBipolar", (void**)&GT_SetBipolar, Dylib::Import::cMangled },
  { "GT_SetDRLChannel", (void**)&GT_SetDRLChannel, Dylib::Import::cMangled },
  { "GT_EnableSC", (void**)&GT_EnableSC, Dylib::Import::cMangled },
  { "GT_SetSlave", (void**)&GT_SetSlave, Dylib::Import::cMangled },
  { "GT_SetDAC", (void**)&GT_SetDAC, Dylib::Import::cMangled },
  { 0, 0, 0 }
};

// Here you may specify a custom error message to be displayed when the library cannot be found.
static const char* notFoundMsg = "";
// Here you may specify an URL to some local or remote help resource.
static const char* notFoundURL = "";
RegisterDylib( gUSBamp, imports, notFoundMsg, notFoundURL );

#endif // DYNAMIC_IMPORTS
