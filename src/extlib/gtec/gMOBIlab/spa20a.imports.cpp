// Import definitions for spa20a.h, generated by dylib_imports.sh
#include "spa20a.imports.h"
#include "DylibImports.h"

#if !DYNAMIC_IMPORTS

namespace Dylib { bool spa20a_Loaded() { return true; } }

#else // DYNAMIC_IMPORTS

extern "C" {
HANDLE (__stdcall *GT_OpenDevice)(LPSTR lpPort) = 0;
BOOL (__stdcall *GT_CloseDevice)(HANDLE hDevice) = 0;
BOOL (__stdcall *GT_SetDigitalOut)(HANDLE hDevice,int dout_number, int value) = 0;
BOOL (__stdcall *GT_InitChannels)(HANDLE hDevice,_AIN analogCh,_DIO digitalCh) = 0;
BOOL (__stdcall *GT_StartAcquisition)(HANDLE hDevice) = 0;
BOOL (__stdcall *GT_StopAcquisition)(HANDLE hDevice) = 0;
BOOL (__stdcall *GT_GetData)(HANDLE hDevice,_BUFFER_ST *buffer,LPOVERLAPPED lpOvl) = 0;
BOOL (__stdcall *GT_GetLastError)(UINT * LastError) = 0;
BOOL (__stdcall *GT_TranslateErrorCode)(_ERRSTR *ErrorString, UINT ErrorCode) = 0;
}

static const Dylib::Import imports[] =
{
  { "GT_OpenDevice", (void**)&GT_OpenDevice, Dylib::Import::cMangled },
  { "GT_CloseDevice", (void**)&GT_CloseDevice, Dylib::Import::cMangled },
  { "GT_SetDigitalOut", (void**)&GT_SetDigitalOut, Dylib::Import::cMangled },
  { "GT_InitChannels", (void**)&GT_InitChannels, Dylib::Import::cMangled },
  { "GT_StartAcquisition", (void**)&GT_StartAcquisition, Dylib::Import::cMangled },
  { "GT_StopAcquisition", (void**)&GT_StopAcquisition, Dylib::Import::cMangled },
  { "GT_GetData", (void**)&GT_GetData, Dylib::Import::cMangled },
  { "GT_GetLastError", (void**)&GT_GetLastError, Dylib::Import::cMangled },
  { "GT_TranslateErrorCode", (void**)&GT_TranslateErrorCode, Dylib::Import::cMangled },
  { 0, 0, 0 }
};

// Here you may specify a custom error message to be displayed when the library cannot be found.
static const char* notFoundMsg = "";
// Here you may specify an URL to some local or remote help resource.
static const char* notFoundURL = "";
RegisterDylib( spa20a, imports, notFoundMsg, notFoundURL );

#endif // DYNAMIC_IMPORTS
