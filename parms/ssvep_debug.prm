Visualize:Property%20Sets matrix VisPropertySets= 0 1 // row titles are properties in the form "SRCD.Left", columns are property sets
System:Configuration matrix OperatorVersion= { Framework Revision Build Config Protocol } 1 3.05 ,%20 MSVC-16.0.40219.1-x86,%20release,%20Mar%2031%202014%2010:30:54,%20eeglab@ROGUE.cseresearch.cs.washington.edu USE_DYNAMIC_IMPORTS:ON%20USE_SSE2:ON%20USE_PRECOMPILED_HEADERS:OFF 5FC4C030 // operator module version information(readonly)
System:Protocol int OperatorBackLink= 1 1 0 1 // Send final state and signal information to Operator (boolean)(readonly)
System:Protocol int AutoConfig= 1 1 0 1 // Use AutoConfig protocol extension (boolean)(readonly)
Storage:Session:DataIOFilter string SubjectSession= 001 001 % % // three-digit session number
Source:Signal%20Properties:DataIOFilter list ChannelNames= 0 // list of channel names
Storage:Data%20Location:DataIOFilter string DataDirectory= ..\data ..\data % % // path to top level data directory (directory)
Storage:Session:DataIOFilter string SubjectName= Name Name % % // subject alias
Storage:Session:DataIOFilter string SubjectRun= 00 00 % % // two-digit run number
Storage:Documentation:DataIOFilter string ID_System= % // BCI2000 System Code
Storage:Documentation:DataIOFilter string ID_Amp= % // BCI2000 Amp Code
Storage:Documentation:DataIOFilter string ID_Montage= % // BCI2000 Cap Montage Code
Visualize:Timing:DataIOFilter int VisualizeTiming= 0 1 0 1 // visualize system timing (0=no, 1=yes) (boolean)
Visualize:Source%20Signal:DataIOFilter int VisualizeSource= 1 1 0 1 // visualize raw brain signal (0=no, 1=yes) (boolean)
Visualize:Source%20Signal:DataIOFilter int VisualizeSourceDecimation= auto auto % % // decimation factor for raw brain signal
Visualize:Source%20Signal:DataIOFilter int VisualizeSourceBufferSize= auto auto % % // number of blocks to aggregate before sending to operator
Visualize:Source%20Signal:DataIOFilter int VisualizeSourceTime= 2s 2s 0 % // how much time in Source visualization
Visualize:Source%20Signal:DataIOFilter int SourceMin= auto // raw signal vis Min Value
Visualize:Source%20Signal:DataIOFilter int SourceMax= auto // raw signal vis Max Value
Source:Signal%20Properties:SignalGeneratorADC int SourceCh= 1 16 1 % // number of digitized and stored channels
Source:Signal%20Properties:SignalGeneratorADC int SampleBlockSize= 128 32 1 % // number of samples transmitted at a time
Source:Signal%20Properties:SignalGeneratorADC int SamplingRate= 256Hz 256Hz 1 % // sample rate
Source:SignalGeneratorADC list SourceChOffset= 1 0 
Source:SignalGeneratorADC list SourceChGain= 1 0.003 
Source:SignalGeneratorADC int ModulateAmplitude= 0 0 0 1 // Modulate the amplitude with the mouse (0=no, 1=yes) (boolean)
Source:SignalGeneratorADC int SineChannelX= 0 0 0 % // Channel number of sinewave controlled by mouse x position
Source:SignalGeneratorADC int SineChannelY= 0 0 0 % // Channel number of sinewave controlled by mouse y position (0 for all)
Source:SignalGeneratorADC int SineChannelZ= 0 0 0 % // Channel number of sinewave controlled by mouse key state
Source:SignalGeneratorADC float SineFrequency= 10Hz 10Hz % % // Frequency of sine wave
Source:SignalGeneratorADC int SineAmplitude= 100muV 100muV % % // Amplitude of sine wave
Source:SignalGeneratorADC int NoiseAmplitude= 30muV 30muV % % // Amplitude of white noise (common to all channels)
Source:SignalGeneratorADC int DCOffset= 0muV 0muV % % // DC offset (common to all channels)
Source:SignalGeneratorADC string AmplitudeMultiplier= 1 1 % % // Expression to multiply amplitude by
Source:SignalGeneratorADC string OffsetMultiplier= % StimulusType % % // Expression to multiply offset by
Source:SignalGeneratorADC int SignalType= 0 0 0 2 // numeric type of output signal:  0: int16, 1: float32, 2: int32 (enumeration)
Source:SignalGeneratorADC matrix SourceProperties= 0 { Frequency Amplitude } // Source properties
Source:SignalGeneratorADC matrix MixingMatrix= 0 1 // Source-to-sensor projection, rows are sources, columns are sensors
Storage:BCI2000FileWriter string FileFormat= dat // format of data file (readonly)
Storage:Documentation:BCI2000FileWriter string StorageTime= % // time of beginning of data storage
Source:Alignment:AlignmentFilter int AlignChannels= 1 0 0 1 // align channels in time (0=no, 1=yes)
Source:Alignment:AlignmentFilter floatlist SourceChTimeOffset= 0 0 % % // time offsets for all source channels (may be empty)
Source:Online%20Processing:TransmissionFilter list TransmitChList= 1 * // list of transmitted channels: Channel names may contain * and ? wildcards,  and character ranges enclosed in []; wildcard patterns may be negated by prepending an exclamation mark.  Ranges of channels may be specified using : or - to separate begin from end.
System:Additional%20Connections:EventLink int EventLink= 1 1 0 1 // Send events from Operator to Source module (boolean)(readonly)
Storage:Data%20Location:RunManager string DataFile= $%7bSubjectName%7d$%7bSubjectSession%7d/$%7bSubjectName%7dS$%7bSubjectSession%7dR$%7bSubjectRun%7d.$%7bFileFormat%7d // name of data file relative to DataDirectory
System:Core%20Connections string OperatorIP= 127.0.0.1 127.0.0.1 % % // the Operator module's IP(readonly)
System:Core%20Connections string SignalSourcePort= 58522 4200 1024 65535 // the SignalSource module's listening port(readonly)
System:Core%20Connections string SignalSourceIP= 128.208.5.218 127.0.0.1 % % // the SignalSource module's listening IP(readonly)
System:Configuration matrix SignalSourceVersion= { Framework Revision Build Config } 1 3.05 ,%20 MSVC-16.0.40219.1-x86,%20release,%20Mar%2031%202014%2010:30:54,%20eeglab@ROGUE.cseresearch.cs.washington.edu USE_DYNAMIC_IMPORTS:ON%20USE_SSE2:ON%20USE_PRECOMPILED_HEADERS:OFF SignalSource version information // (readonly)
System:Configuration matrix SignalSourceFilterChain= 8 { Filter%20Name Position%20String } DataIOFilter 0 SignalGeneratorADC 1 NullFileWriter 1 BCI2000FileWriter 1 EDFFileWriter 1 GDFFileWriter 1 AlignmentFilter 1.1 TransmissionFilter 1.2 // SignalSource filter chain(readonly)
System:Configuration matrix Filters= 12 1 /1/DataIOFilter /1/SignalGeneratorADC /1/BCI2000FileWriter /1/AlignmentFilter /1/TransmissionFilter /2/WindowingFilter /2/EMDFilter /2/FFTSpectrum /3/ConnectorInput /3/SSVEPFeedbackTask /3/KeystrokeFilter /3/ConnectorOutput // Filter Directory(readonly)
Visualize:Processing%20Stages int VisualizeAlignmentFilter= 0 0 0 1 // Visualize AlignmentFilter output (boolean)
Visualize:Processing%20Stages int VisualizeTransmissionFilter= 0 0 0 1 // Visualize TransmissionFilter output (boolean)
Filtering:Windowing:WindowingThread int WindowLength= 1s 0.5s % % // Length of window
Filtering:Windowing:WindowingThread int Detrend= 0 0 0 2 // Detrend data? 0: no, 1: mean, 2: linear (enumeration)
Filtering:Windowing:WindowingThread int WindowFunction= 0 0 0 3 // Window function 0: Rectangular, 1: Hamming, 2: Hann, 3: Blackman (enumeration)
Filtering:EMDThread float SiftStopStdDev= 0.3 0.3 0.05 1.0 // Standard deviation used to stop EMD sifting
Filtering:EMDThread int Interpolation= 1 1 0 1 // Interpolation method to use for calculating bounding envelopes (0 = linear, 1 = cubic)
Filtering:EMDThread int MaxIMFs= 1 10 0 64 // Maximum number of Intrinsic Mode Functions (IMFs) to return
Filtering:Spectral%20Estimation:FFTThread float FirstBinCenter= 0Hz 0Hz % % // Center of first frequency bin (in Hz)
Filtering:Spectral%20Estimation:FFTThread float LastBinCenter= 30Hz 30Hz % % // Center of last frequency bin (in Hz)
Filtering:Spectral%20Estimation:FFTThread float BinWidth= 1Hz 3Hz % % // Width of spectral bins (in Hz)
Filtering:Spectral%20Estimation:FFTThread int OutputType= 0 0 0 2 // 0: Spectral Amplitude, 1: Spectral Power, 2: Coefficients (enumeration)
System:Core%20Connections string SignalProcessingPort= 58524 4200 1024 65535 // the SignalProcessing module's listening port(readonly)
System:Core%20Connections string SignalProcessingIP= 128.208.5.218 127.0.0.1 % % // the SignalProcessing module's listening IP(readonly)
System:Configuration matrix SignalProcessingVersion= { Framework Revision Build Config } 1 3.05 ,%20 MSVC-16.0.40219.1-x86,%20release,%20Mar%2031%202014%2010:30:54,%20eeglab@ROGUE.cseresearch.cs.washington.edu USE_DYNAMIC_IMPORTS:ON%20USE_SSE2:ON%20USE_PRECOMPILED_HEADERS:OFF SignalProcessing version information // (readonly)
System:Configuration matrix SignalProcessingFilterChain= 3 { Filter%20Name Position%20String } WindowingFilter 2.A EMDFilter 2.B FFTSpectrum 2.C // SignalProcessing filter chain(readonly)
Visualize:Processing%20Stages int VisualizeWindowingFilter= 0 0 0 1 // Visualize WindowingFilter output (boolean)
Visualize:Processing%20Stages int VisualizeEMDFilter= 0 0 0 1 // Visualize EMDFilter output (boolean)
Visualize:Processing%20Stages int VisualizeFFTSpectrum= 1 0 0 1 // Visualize FFTSpectrum output (boolean)
Connector:ConnectorInput list ConnectorInputFilter= 0 // list of state names or signal elements to allow, "*" for any, signal elements as in "Signal(1,0)"
Connector:ConnectorInput string ConnectorInputAddress= % localhost:20320 % % // IP address/port to read from, e.g. localhost:20320
Application:Application%20Window:ApplicationWindow int WindowWidth= 640 640 0 % // width of Application window
Application:Application%20Window:ApplicationWindow int WindowHeight= 480 480 0 % // height of Application window
Application:Application%20Window:ApplicationWindow int WindowLeft= 0 0 % % // screen coordinate of Application window's left edge
Application:Application%20Window:ApplicationWindow int WindowTop= 0 0 % % // screen coordinate of Application window's top edge
Application:Application%20Window:ApplicationWindow string WindowBackgroundColor= 0x000000 0x505050 % % // Application window background color (color)
Visualize:Application%20Window:ApplicationWindow int VisualizeApplicationWindow= 0 0 0 1 // Display miniature copy of Application window (boolean)
Visualize:Application%20Window:ApplicationWindow int AppWindowSpatialDecimation= 8 8 1 % // Application window decimation (shrinking) factor
Visualize:Application%20Window:ApplicationWindow int AppWindowTemporalDecimation= 4 16 1 % // Application window time decimation factor
Visualize:Application%20Log:ApplicationBase int ShowAppLog= 1 0 0 1 // Show application log window (boolean)
Application:Sequencing:FeedbackTask float PreRunDuration= 2s 2s 0 % // duration of pause preceding first trial
Application:Sequencing:FeedbackTask float PreFeedbackDuration= 2s 2s 0 % // duration of target display prior to feedback
Application:Sequencing:FeedbackTask float FeedbackDuration= 6s 3s 0 % // duration of feedback
Application:Sequencing:FeedbackTask float PostFeedbackDuration= 2s 1s 0 % // duration of result display after feedback
Application:Sequencing:FeedbackTask float ITIDuration= 3s 1s 0 % // duration of inter-trial interval
Application:Sequencing:FeedbackTask float MinRunLength= % 120s 0 % // minimum duration of a run; if blank, NumberOfTrials is used
Application:Sequencing:FeedbackTask int NumberOfTrials= 10 0 0 % // number of trials; if blank, MinRunLength is used
Application:Targets:FeedbackTask int NumberTargets= 2 2 0 255 // number of targets
Application:Targets:FeedbackTask intlist TargetSequence= 0 1 % % // fixed sequence in which targets should be presented (leave empty for random)
Application:Mongoose:MongooseFeedbackTask string FileDirectory= C:\NeuralSystemsBCI2000\prog\Brain2Brain // Directory where the game files are located (directory)
Application:Mongoose:MongooseFeedbackTask string ListeningPort= 20000 20320 % % // Port for the server to listen on
Application:SSVEP:SSVEPFeedbackTask matrix Arrows= 2 { Frequency X Y Labels } 12 10 50 Yes 17 90 50 No // Frequency of input expected for each target and their position in percentage coordinates
Application:SSVEP:SSVEPFeedbackTask float ArrowLength= 60 % 0 70 // Length of an arrow in percent of screen dimensions
Application:SSVEP:SSVEPFeedbackTask int StimulusMode= 0 0 0 1 // Training or classification: 0 Training, 1 Classification (enumeration)
Application:SSVEP:SSVEPFeedbackTask string TrainingFile= C:/NeuralSystemsBCI2000/data/SSVEP/Training.tsv // File to store/read the result of training (inputfile)
Application:SSVEP:SSVEPFeedbackTask float ClassificationThreshold= 0.95 % 0 1 // Probability threshold at which some particular classification is made
Application:Human%20Interface%20Devices:KeystrokeFilter string KeystrokeStateName= % // State to be translated into keystrokes (0-F), empty for off
Application:Human%20Interface%20Devices:KeystrokeFilter string KeystrokeExpression= % // Expression that evaluates to a virtual keycode, empty for off
Application:Human%20Interface%20Devices:KeystrokeFilter string KeystrokeExpressionOnStartRun= % // Expression that initializes expression variables on StartRun
Connector:ConnectorOutput string ConnectorOutputAddress= % localhost:20321 % % // one or more IP:Port combinations, e.g. localhost:20321
Connector:ConnectorOutput string ConnectorOutputFormat= Verbose Verbose % % // Either "Verbose" or "JSON"
System:Core%20Connections string ApplicationPort= 58526 4200 1024 65535 // the Application module's listening port(readonly)
System:Core%20Connections string ApplicationIP= 128.208.5.218 127.0.0.1 % % // the Application module's listening IP(readonly)
System:Configuration matrix ApplicationVersion= { Framework Revision Build Config } 1 3.05 ,%20 MSVC-16.0.40219.1-x86,%20release,%20Mar%2031%202014%2010:30:54,%20eeglab@ROGUE.cseresearch.cs.washington.edu USE_DYNAMIC_IMPORTS:ON%20USE_SSE2:ON%20USE_PRECOMPILED_HEADERS:OFF Application version information // (readonly)
System:Configuration matrix ApplicationFilterChain= 4 { Filter%20Name Position%20String } ConnectorInput 2.9999 SSVEPFeedbackTask 3 KeystrokeFilter 3.1 ConnectorOutput 3.9999 // Application filter chain(readonly)
System:Randomization int RandomSeed= 694 0 % % // seed for the BCI2000 pseudo random number generator(readonly)
System:Randomization int RandomizationWarning= 1 1 0 1 // warn if subsequent Runs have identical RandomSeed value (boolean)(readonly)
System:State%20Vector int StateVectorLength= 8 16 % % // length of the state vector in bytes(readonly)
