Visualize:Property%20Sets matrix VisPropertySets= 0 1 // row titles are properties in the form "SRCD.Left", columns are property sets
System:Configuration matrix OperatorVersion= { Framework Revision Build } 1 3.0.5 % Jul%2023%202013%2018:06:14 // operator module version information
System:Additional%20Connections int OperatorBackLink= 1 1 0 1 // Send final state and signal information to Operator (boolean)
Filtering:SpatialFilter int SpatialFilterType= 2 2 0 3 // spatial filter type 0: none, 1: full matrix, 2: sparse matrix, 3: common average reference (CAR) (enumeration)
Filtering:SpatialFilter:SpatialFilter matrix SpatialFilter= 308 { input output weight } FC5 FC5 1 AF7 FC5 -1/60/(1/60+1/60+1/60+1/30) FC1 FC5 -1/60/(1/60+1/60+1/60+1/30) CP5 FC5 -1/60/(1/60+1/60+1/60+1/30) FT7 FC5 -1/30/(1/60+1/60+1/60+1/30) FC3 FC3 1 AF3 FC3 -1/60/(1/60+1/60+1/60+1/60) FCz FC3 -1/60/(1/60+1/60+1/60+1/60) CP3 FC3 -1/60/(1/60+1/60+1/60+1/60) FT7 FC3 -1/60/(1/60+1/60+1/60+1/60) FC1 FC1 1 AF3 FC1 -1/60/(1/60+1/60+1/60+1/60) FC2 FC1 -1/60/(1/60+1/60+1/60+1/60) CP1 FC1 -1/60/(1/60+1/60+1/60+1/60) FC5 FC1 -1/60/(1/60+1/60+1/60+1/60) FCz FCz 1 AFz FCz -1/60/(1/60+1/60+1/60+1/60) FC4 FCz -1/60/(1/60+1/60+1/60+1/60) CPz FCz -1/60/(1/60+1/60+1/60+1/60) FC3 FCz -1/60/(1/60+1/60+1/60+1/60) FC2 FC2 1 AF4 FC2 -1/60/(1/60+1/60+1/60+1/60) FC6 FC2 -1/60/(1/60+1/60+1/60+1/60) CP2 FC2 -1/60/(1/60+1/60+1/60+1/60) FC1 FC2 -1/60/(1/60+1/60+1/60+1/60) FC4 FC4 1 AF4 FC4 -1/60/(1/60+1/60+1/60+1/60) FT8 FC4 -1/60/(1/60+1/60+1/60+1/60) CP4 FC4 -1/60/(1/60+1/60+1/60+1/60) FCz FC4 -1/60/(1/60+1/60+1/60+1/60) FC6 FC6 1 AF8 FC6 -1/60/(1/60+1/30+1/60+1/60) FT8 FC6 -1/30/(1/60+1/30+1/60+1/60) CP6 FC6 -1/60/(1/60+1/30+1/60+1/60) FC2 FC6 -1/60/(1/60+1/30+1/60+1/60) C5 C5 1 F5 C5 -1/60/(1/60+1/60+1/60+1/60) C1 C5 -1/60/(1/60+1/60+1/60+1/60) P5 C5 -1/60/(1/60+1/60+1/60+1/60) T9 C5 -1/60/(1/60+1/60+1/60+1/60) C3 C3 1 F3 C3 -1/60/(1/60+1/60+1/60+1/60) Cz C3 -1/60/(1/60+1/60+1/60+1/60) P3 C3 -1/60/(1/60+1/60+1/60+1/60) T7 C3 -1/60/(1/60+1/60+1/60+1/60) C1 C1 1 F1 C1 -1/60/(1/60+1/60+1/60+1/60) C2 C1 -1/60/(1/60+1/60+1/60+1/60) P1 C1 -1/60/(1/60+1/60+1/60+1/60) C5 C1 -1/60/(1/60+1/60+1/60+1/60) Cz Cz 1 Fz Cz -1/60/(1/60+1/60+1/60+1/60) C4 Cz -1/60/(1/60+1/60+1/60+1/60) Pz Cz -1/60/(1/60+1/60+1/60+1/60) C3 Cz -1/60/(1/60+1/60+1/60+1/60) C2 C2 1 F2 C2 -1/60/(1/60+1/60+1/60+1/60) C6 C2 -1/60/(1/60+1/60+1/60+1/60) P2 C2 -1/60/(1/60+1/60+1/60+1/60) C1 C2 -1/60/(1/60+1/60+1/60+1/60) C4 C4 1 F4 C4 -1/60/(1/60+1/60+1/60+1/60) T8 C4 -1/60/(1/60+1/60+1/60+1/60) P4 C4 -1/60/(1/60+1/60+1/60+1/60) Cz C4 -1/60/(1/60+1/60+1/60+1/60) C6 C6 1 F6 C6 -1/60/(1/60+1/60+1/60+1/60) T10 C6 -1/60/(1/60+1/60+1/60+1/60) P6 C6 -1/60/(1/60+1/60+1/60+1/60) C2 C6 -1/60/(1/60+1/60+1/60+1/60) CP5 CP5 1 FC5 CP5 -1/60/(1/60+1/60+1/60+1/30) CP1 CP5 -1/60/(1/60+1/60+1/60+1/30) PO7 CP5 -1/60/(1/60+1/60+1/60+1/30) TP7 CP5 -1/30/(1/60+1/60+1/60+1/30) CP3 CP3 1 FC3 CP3 -1/60/(1/60+1/60+1/60+1/60) CPz CP3 -1/60/(1/60+1/60+1/60+1/60) PO3 CP3 -1/60/(1/60+1/60+1/60+1/60) TP7 CP3 -1/60/(1/60+1/60+1/60+1/60) CP1 CP1 1 FC1 CP1 -1/60/(1/60+1/60+1/60+1/60) CP2 CP1 -1/60/(1/60+1/60+1/60+1/60) PO3 CP1 -1/60/(1/60+1/60+1/60+1/60) CP5 CP1 -1/60/(1/60+1/60+1/60+1/60) CPz CPz 1 FCz CPz -1/60/(1/60+1/60+1/60+1/60) CP4 CPz -1/60/(1/60+1/60+1/60+1/60) POz CPz -1/60/(1/60+1/60+1/60+1/60) CP3 CPz -1/60/(1/60+1/60+1/60+1/60) CP2 CP2 1 FC2 CP2 -1/60/(1/60+1/60+1/60+1/60) CP6 CP2 -1/60/(1/60+1/60+1/60+1/60) PO4 CP2 -1/60/(1/60+1/60+1/60+1/60) CP1 CP2 -1/60/(1/60+1/60+1/60+1/60) CP4 CP4 1 FC4 CP4 -1/60/(1/60+1/60+1/60+1/60) TP8 CP4 -1/60/(1/60+1/60+1/60+1/60) PO4 CP4 -1/60/(1/60+1/60+1/60+1/60) CPz CP4 -1/60/(1/60+1/60+1/60+1/60) CP6 CP6 1 FC6 CP6 -1/60/(1/60+1/30+1/60+1/60) TP8 CP6 -1/30/(1/60+1/30+1/60+1/60) PO8 CP6 -1/60/(1/60+1/30+1/60+1/60) CP2 CP6 -1/60/(1/60+1/30+1/60+1/60) Fp1 Fp1 1 F7 Fp1 -1/60/(1/60+1/60+1/65+1/50) F3 Fp1 -1/60/(1/60+1/60+1/65+1/50) Fz Fp1 -1/65/(1/60+1/60+1/65+1/50) Fp2 Fp1 -1/50/(1/60+1/60+1/65+1/50) Fpz Fpz 1 AF7 Fpz -1/55/(1/55+1/60+1/60) F1 Fpz -1/60/(1/55+1/60+1/60) F2 Fpz -1/60/(1/55+1/60+1/60) Fp2 Fp2 1 Fp1 Fp2 -1/50/(1/50+1/65+1/60+1/60) Fz Fp2 -1/65/(1/50+1/65+1/60+1/60) F4 Fp2 -1/60/(1/50+1/65+1/60+1/60) F8 Fp2 -1/60/(1/50+1/65+1/60+1/60) AF7 AF7 1 FT7 AF7 -1/60/(1/60+1/67+1/55+1/76) FC3 AF7 -1/67/(1/60+1/67+1/55+1/76) Fpz AF7 -1/55/(1/60+1/67+1/55+1/76) Fz AF7 -1/76/(1/60+1/67+1/55+1/76) AF3 AF3 1 Fpz AF3 -1/50/(1/50+1/50+1/60+1/42) Fz AF3 -1/50/(1/50+1/50+1/60+1/42) FC3 AF3 -1/60/(1/50+1/50+1/60+1/42) F7 AF3 -1/42/(1/50+1/50+1/60+1/42) AFz AFz 1 Fpz AFz -1/40/(1/40+1/70+1/60+1/70) AF8 AFz -1/70/(1/40+1/70+1/60+1/70) FCz AFz -1/60/(1/40+1/70+1/60+1/70) AF7 AFz -1/70/(1/40+1/70+1/60+1/70) AF4 AF4 1 Fpz AF4 -1/50/(1/50+1/50+1/60+1/42) Fz AF4 -1/50/(1/50+1/50+1/60+1/42) FC4 AF4 -1/60/(1/50+1/50+1/60+1/42) F8 AF4 -1/42/(1/50+1/50+1/60+1/42) AF8 AF8 1 Fpz AF8 -1/55/(1/55+1/70+1/60+1/67) Fz AF8 -1/70/(1/55+1/70+1/60+1/67) FT8 AF8 -1/60/(1/55+1/70+1/60+1/67) FC4 AF8 -1/67/(1/55+1/70+1/60+1/67) F7 F7 1 Fp1 F7 -1/60/(1/60+1/50+1/39) F3 F7 -1/50/(1/60+1/50+1/39) FC5 F7 -1/39/(1/60+1/50+1/39) F5 F5 1 Fp1 F5 -1/65/(1/65+1/50+1/60+1/25) F1 F5 -1/50/(1/65+1/50+1/60+1/25) C5 F5 -1/60/(1/65+1/50+1/60+1/25) F7 F5 -1/25/(1/65+1/50+1/60+1/25) F3 F3 1 Fp1 F3 -1/60/(1/60+1/50+1/60+1/50) Fz F3 -1/50/(1/60+1/50+1/60+1/50) C3 F3 -1/60/(1/60+1/50+1/60+1/50) F7 F3 -1/50/(1/60+1/50+1/60+1/50) F1 F1 1 Fp1 F1 -1/60/(1/60+1/50+1/60+1/50) F2 F1 -1/50/(1/60+1/50+1/60+1/50) C1 F1 -1/60/(1/60+1/50+1/60+1/50) F5 F1 -1/50/(1/60+1/50+1/60+1/50) Fz Fz 1 Fpz Fz -1/60/(1/60+1/50+1/60+1/50) F4 Fz -1/50/(1/60+1/50+1/60+1/50) Cz Fz -1/60/(1/60+1/50+1/60+1/50) F3 Fz -1/50/(1/60+1/50+1/60+1/50) F2 F2 1 Fp2 F2 -1/60/(1/60+1/50+1/60+1/50) F6 F2 -1/50/(1/60+1/50+1/60+1/50) C2 F2 -1/60/(1/60+1/50+1/60+1/50) F1 F2 -1/50/(1/60+1/50+1/60+1/50) F4 F4 1 Fp2 F4 -1/60/(1/60+1/50+1/60+1/50) F8 F4 -1/50/(1/60+1/50+1/60+1/50) C4 F4 -1/60/(1/60+1/50+1/60+1/50) Fz F4 -1/50/(1/60+1/50+1/60+1/50) F6 F6 1 Fp2 F6 -1/60/(1/60+1/50+1/60+1/25) F2 F6 -1/50/(1/60+1/50+1/60+1/25) C6 F6 -1/60/(1/60+1/50+1/60+1/25) F8 F6 -1/25/(1/60+1/50+1/60+1/25) F8 F8 1 Fp2 F8 -1/60/(1/60+1/50+1/39) F4 F8 -1/50/(1/60+1/50+1/39) FC6 F8 -1/39/(1/60+1/50+1/39) FT7 FT7 1 AF7 FT7 -1/60/(1/60+1/67+1/67) F3 FT7 -1/67/(1/60+1/67+1/67) C3 FT7 -1/67/(1/60+1/67+1/67) FT8 FT8 1 AF8 FT8 -1/60/(1/60+1/67+1/67) F4 FT8 -1/67/(1/60+1/67+1/67) C4 FT8 -1/67/(1/60+1/67+1/67) T7 T7 1 F7 T7 -1/60/(1/60+1/60+1/60+1/30) C3 T7 -1/60/(1/60+1/60+1/60+1/30) P7 T7 -1/60/(1/60+1/60+1/60+1/30) T9 T7 -1/30/(1/60+1/60+1/60+1/30) T8 T8 1 F8 T8 -1/60/(1/60+1/30+1/60+1/60) T10 T8 -1/30/(1/60+1/30+1/60+1/60) P8 T8 -1/60/(1/60+1/30+1/60+1/60) C4 T8 -1/60/(1/60+1/30+1/60+1/60) T9 T9 1 F7 T9 -1/67/(1/67+1/60+1/67) C5 T9 -1/60/(1/67+1/60+1/67) P7 T9 -1/67/(1/67+1/60+1/67) T10 T10 1 F8 T10 -1/67/(1/67+1/60+1/67) C6 T10 -1/60/(1/67+1/60+1/67) P8 T10 -1/67/(1/67+1/60+1/67) TP7 TP7 1 FT7 TP7 -1/60/(1/60+1/67+1/67) C3 TP7 -1/67/(1/60+1/67+1/67) P3 TP7 -1/67/(1/60+1/67+1/67) TP8 TP8 1 FT8 TP8 -1/60/(1/60+1/67+1/67) C4 TP8 -1/67/(1/60+1/67+1/67) P4 TP8 -1/67/(1/60+1/67+1/67) P7 P7 1 T7 P7 -1/60/(1/60+1/50+1/60) P3 P7 -1/50/(1/60+1/50+1/60) O1 P7 -1/60/(1/60+1/50+1/60) P5 P5 1 C5 P5 -1/60/(1/60+1/50+1/65+1/25) P1 P5 -1/50/(1/60+1/50+1/65+1/25) O1 P5 -1/65/(1/60+1/50+1/65+1/25) P7 P5 -1/25/(1/60+1/50+1/65+1/25) P3 P3 1 C3 P3 -1/60/(1/60+1/50+1/60+1/50) Pz P3 -1/50/(1/60+1/50+1/60+1/50) O1 P3 -1/60/(1/60+1/50+1/60+1/50) P7 P3 -1/50/(1/60+1/50+1/60+1/50) P1 P1 1 C1 P1 -1/60/(1/60+1/50+1/60+1/50) P2 P1 -1/50/(1/60+1/50+1/60+1/50) O1 P1 -1/60/(1/60+1/50+1/60+1/50) P5 P1 -1/50/(1/60+1/50+1/60+1/50) Pz Pz 1 Cz Pz -1/60/(1/60+1/50+1/60+1/50) P4 Pz -1/50/(1/60+1/50+1/60+1/50) Oz Pz -1/60/(1/60+1/50+1/60+1/50) P3 Pz -1/50/(1/60+1/50+1/60+1/50) P2 P2 1 C2 P2 -1/70/(1/70+1/50+1/60+1/50) P6 P2 -1/50/(1/70+1/50+1/60+1/50) O2 P2 -1/60/(1/70+1/50+1/60+1/50) P1 P2 -1/50/(1/70+1/50+1/60+1/50) P4 P4 1 C4 P4 -1/60/(1/60+1/50+1/60+1/50) P8 P4 -1/50/(1/60+1/50+1/60+1/50) O2 P4 -1/60/(1/60+1/50+1/60+1/50) Pz P4 -1/50/(1/60+1/50+1/60+1/50) P6 P6 1 C6 P6 -1/60/(1/60+1/25+1/65+1/50) P8 P6 -1/25/(1/60+1/25+1/65+1/50) O2 P6 -1/65/(1/60+1/25+1/65+1/50) P2 P6 -1/50/(1/60+1/25+1/65+1/50) P8 P8 1 T8 P8 -1/60/(1/60+1/50+1/60) P4 P8 -1/50/(1/60+1/50+1/60) O2 P8 -1/60/(1/60+1/50+1/60) PO7 PO7 1 TP7 PO7 -1/60/(1/60+1/42+1/70+1/55) P3 PO7 -1/42/(1/60+1/42+1/70+1/55) POz PO7 -1/70/(1/60+1/42+1/70+1/55) Oz PO7 -1/55/(1/60+1/42+1/70+1/55) PO3 PO3 1 CP3 PO3 -1/60/(1/60+1/80+1/72+1/30) PO4 PO3 -1/80/(1/60+1/80+1/72+1/30) Iz PO3 -1/72/(1/60+1/80+1/72+1/30) PO7 PO3 -1/30/(1/60+1/80+1/72+1/30) POz POz 1 CPz POz -1/60/(1/60+1/70+1/60+1/70) PO8 POz -1/70/(1/60+1/70+1/60+1/70) Iz POz -1/60/(1/60+1/70+1/60+1/70) PO7 POz -1/70/(1/60+1/70+1/60+1/70) PO4 PO4 1 CP4 PO4 -1/60/(1/60+1/72+1/30+1/80) Iz PO4 -1/72/(1/60+1/72+1/30+1/80) PO8 PO4 -1/30/(1/60+1/72+1/30+1/80) PO3 PO4 -1/80/(1/60+1/72+1/30+1/80) PO8 PO8 1 TP8 PO8 -1/60/(1/60+1/42+1/55+1/70) P4 PO8 -1/42/(1/60+1/42+1/55+1/70) Oz PO8 -1/55/(1/60+1/42+1/55+1/70) POz PO8 -1/70/(1/60+1/42+1/55+1/70) O1 O1 1 P7 O1 -1/60/(1/60+1/60+1/65+1/50) P3 O1 -1/60/(1/60+1/60+1/65+1/50) Pz O1 -1/65/(1/60+1/60+1/65+1/50) O2 O1 -1/50/(1/60+1/60+1/65+1/50) Oz Oz 1 Pz Oz -1/60/(1/60+1/55+1/30+1/55) PO8 Oz -1/55/(1/60+1/55+1/30+1/55) Iz Oz -1/30/(1/60+1/55+1/30+1/55) PO7 Oz -1/55/(1/60+1/55+1/30+1/55) O2 O2 1 O1 O2 -1/50/(1/50+1/65+1/60+1/60) Pz O2 -1/65/(1/50+1/65+1/60+1/60) P4 O2 -1/60/(1/50+1/65+1/60+1/60) P8 O2 -1/60/(1/50+1/65+1/60+1/60) Iz Iz 1 PO7 Iz -1/63/(1/63+1/60+1/63) POz Iz -1/60/(1/63+1/60+1/63) PO8 Iz -1/63/(1/63+1/60+1/63) 0 % % // columns represent input channels, rows represent output channels
Filtering:SpatialFilter:SpatialFilter intlist SpatialFilterCAROutput= 0 // when using CAR filter type: list of output channels, or empty for all channels
Filtering:SpatialFilter:SpatialFilter int SpatialFilterMissingChannels= 0 0 0 1 // how to handle missing channels 0: ignore, 1: report error (enumeration)
Filtering:Spectral%20Estimation:ARThread float FirstBinCenter= 0Hz 0Hz % % // Center of first frequency bin (in Hz)
Filtering:Spectral%20Estimation:ARThread float LastBinCenter= 30Hz 30Hz % % // Center of last frequency bin (in Hz)
Filtering:Spectral%20Estimation:ARThread float BinWidth= 3Hz 3Hz % % // Width of spectral bins (in Hz)
Filtering:Spectral%20Estimation:ARThread int OutputType= 0 0 0 2 // 0: Spectral Amplitude, 1: Spectral Power, 2: Coefficients (enumeration)
Filtering:AR%20Spectral%20Estimator:ARThread int ModelOrder= 16 16 0 % // AR model order
Filtering:AR%20Spectral%20Estimator:ARThread int EvaluationsPerBin= 15 15 1 % // Number of uniformly spaced evaluation points entering into a single bin value
Filtering:Windowing:WindowingThread int WindowLength= 0.5s 0.5s % % // Length of window
Filtering:Windowing:WindowingThread int Detrend= 0 0 0 2 // Detrend data? 0: no, 1: mean, 2: linear (enumeration)
Filtering:Windowing:WindowingThread int WindowFunction= 0 0 0 3 // Window function 0: Rectangular, 1: Hamming, 2: Hann, 3: Blackman (enumeration)
Filtering:LinearClassifier matrix Classifier= 1 { input%20channel input%20element%20(bin) output%20channel weight } 2 9Hz 2 1 // Linear classification matrix in sparse representation
Filtering:LPFilter float LPTimeConstant= 1s 16s 0 % // time constant for the low pass filter
Filtering:ExpressionFilter string StartRunExpression= % // expression executed on StartRun
Filtering:ExpressionFilter string StopRunExpression= % // expression executed on StopRun
Filtering:ExpressionFilter matrix Expressions= 0 1 // expressions used to compute the output of the ExpressionFilter (rows are channels; empty matrix for none)
Filtering:Normalizer floatlist NormalizerOffsets= 2 -1 32 0 % % // normalizer offsets
Filtering:Normalizer floatlist NormalizerGains= 2 2 0.5 0 % % // normalizer gain values
Filtering:Normalizer intlist Adaptation= 2 0 2 0 0 2 // 0: no adaptation, 1: zero mean, 2: zero mean, unit variance (enumeration)
Filtering:Normalizer matrix BufferConditions= 2 2 0 (Feedback)&&(TargetCode==1) 0 (Feedback)&&(TargetCode==2) // expressions corresponding to data buffers (columns correspond to output channels, multiple rows correspond to multiple buffers)
Filtering:Normalizer float BufferLength= 4s 9s % % // time window of past data per buffer that enters into statistic
Filtering:Normalizer string UpdateTrigger= (Feedback==0) // expression to trigger offset/gain update when changing from 0 (use empty string for continuous update)
System:Core%20Connections string SignalProcessingIP= 127.0.0.1 127.0.0.1 % % // the SignalProcessing module's listening IP
System:Core%20Connections string OperatorIP= 127.0.0.1 127.0.0.1 % % // the Operator module's IP
System:Core%20Connections string SignalProcessingPort= 26350 4200 1024 65535 // the SignalProcessing module's listening port
System:Configuration matrix SignalProcessingVersion= { Framework Revision Build } 1 3.0.5 % Jul%2023%202013%2018:06:14 // SignalProcessing version information
System:Configuration matrix SignalProcessingFilterChain= 6 { Filter%20Name Position%20String } SpatialFilter 2.B ARFilter 2.C LinearClassifier 2.D LPFilter 2.D1 ExpressionFilter 2.D2 Normalizer 2.E // SignalProcessing filter chain
Visualize:Processing%20Stages int VisualizeSpatialFilter= 1 0 0 1 // Visualize SpatialFilter output (boolean)
Visualize:Processing%20Stages int VisualizeARFilter= 1 0 0 1 // Visualize ARFilter output (boolean)
Visualize:Processing%20Stages int VisualizeLinearClassifier= 1 0 0 1 // Visualize LinearClassifier output (boolean)
Visualize:Processing%20Stages int VisualizeExpressionFilter= 0 0 0 1 // Visualize ExpressionFilter output (boolean)
Visualize:Processing%20Stages int VisualizeLPFilter= 0 0 0 1 // Visualize LPFilter output (boolean)
Visualize:Processing%20Stages int VisualizeNormalizer= 1 0 0 1 // Visualize Normalizer output (boolean)
Connector:ConnectorInput list ConnectorInputFilter= 0 // list of state names or signal elements to allow, "*" for any, signal elements as in "Signal(1,0)"
Connector:ConnectorInput string ConnectorInputAddress= % localhost:20320 % % // IP address/port to read from, e.g. localhost:20320
Application:Application%20Window:ApplicationWindow int WindowWidth= 1680 640 0 % // width of Application window
Application:Application%20Window:ApplicationWindow int WindowHeight= 1050 480 0 % // height of Application window
Application:Application%20Window:ApplicationWindow int WindowLeft= 1920 0 % % // screen coordinate of Application window's left edge
Application:Application%20Window:ApplicationWindow int WindowTop= 30 0 % % // screen coordinate of Application window's top edge
Application:Application%20Window:ApplicationWindow string WindowBackgroundColor= 0x000000 0x505050 % % // Application window background color (color)
Visualize:Application%20Window:ApplicationWindow int VisualizeApplicationWindow= 1 0 0 1 // Display miniature copy of Application window (boolean)
Visualize:Application%20Window:ApplicationWindow int AppWindowSpatialDecimation= 8 8 1 % // Application window decimation (shrinking) factor
Visualize:Application%20Window:ApplicationWindow int AppWindowTemporalDecimation= 4 16 1 % // Application window time decimation factor
Visualize:Application%20Log:ApplicationBase int ShowAppLog= 1 0 0 1 // Show application log window (boolean)
Application:Sequencing:FeedbackTask float PreRunDuration= 0s 2s 0 % // duration of pause preceding first trial
Application:Sequencing:FeedbackTask float PreFeedbackDuration= 2s 2s 0 % // duration of target display prior to feedback
Application:Sequencing:FeedbackTask float FeedbackDuration= 6s 3s 0 % // duration of feedback
Application:Sequencing:FeedbackTask float PostFeedbackDuration= 1s 1s 0 % // duration of result display after feedback
Application:Sequencing:FeedbackTask float ITIDuration= 0s 1s 0 % // duration of inter-trial interval
Application:Sequencing:FeedbackTask float MinRunLength= 120s 120s 0 % // minimum duration of a run; if blank, NumberOfTrials is used
Application:Sequencing:FeedbackTask int NumberOfTrials= % 0 0 % // number of trials; if blank, MinRunLength is used
Application:Targets:FeedbackTask int NumberTargets= 2 2 0 255 // number of targets
Application:Targets:FeedbackTask intlist TargetSequence= 0 1 % % // fixed sequence in which targets should be presented (leave empty for random)
Application:Targets:DynamicFeedbackTask int TaskDifficulty= 3 // Difficulty is from to 1(hardest) to 5(easiest) 
Application:Targets:DynamicFeedbackTask matrix Targets= 8 { pos%20x pos%20y pos%20z width%20x width%20y width%20z } 50 80 50 6 6 6 50 20 50 6 6 6 80 50 50 6 6 6 71.21 28.79 50 6 6 6 50 20 50 6 6 6 28.79 28.79 50 6 6 6 20 50 50 6 6 6 28.79 71.21 50 6 6 6 // target positions and widths in percentage coordinates
Application:Targets:DynamicFeedbackTask int TargetColor= 0x0000FF // target color (color)
Application:Targets:DynamicFeedbackTask string TargetTexture= % // path of target texture (inputfile)
Application:Targets:DynamicFeedbackTask int TestAllTargets= 0 0 0 1 // test all targets for cursor collision? 0: test only the visible current target, 1: test all targets (enumeration)
Application:Cursor:DynamicFeedbackTask float CursorWidth= 5 10 0.0 % // feedback cursor width in percent of screen width
Application:Cursor:DynamicFeedbackTask int cPrimaryAxis= 1 // set cursor movement axis: 1 X: Keyboard (L/R); Y: Control Signal,    2 X: Control Signal; Y: Keyboard (U/D)
Application:Cursor:DynamicFeedbackTask int CursorControlMode= 0 0 0 1 // Select cursor control mode 0: centering gravity mode, 1: velocity dependent mode (enumeration)
Application:Cursor:DynamicFeedbackTask float CursorSpeedMult= 5 // Cursor speed from to 1(slowest) to 10(fastest) 
Application:Cursor:DynamicFeedbackTask float CursorGravity= .5 // Centering cursor gravity from to 0 (weakest) to 10 (strongest) 
Application:Cursor:DynamicFeedbackTask int CursorColorFront= 0xFFFFFF // cursor color when it is at the front of the workspace (color)
Application:Cursor:DynamicFeedbackTask int CursorColorBack= 0xFFFFFF // cursor color when it is in the back of the workspace (color)
Application:Cursor:DynamicFeedbackTask string CursorTexture= % // path of cursor texture (inputfile)
Application:Cursor:DynamicFeedbackTask floatlist CursorPos= 3 50 50 50 // cursor starting position
Application:Window:DynamicFeedbackTask int RenderingQuality= 0 0 0 1 // rendering quality: 0: low, 1: high (enumeration)
Application:Sequencing:DynamicFeedbackTask float MaxFeedbackDuration= 6s % 0 % // abort a trial after this amount of feedback time has expired
Application:3DEnvironment:DynamicFeedbackTask floatlist CameraPos= 3 50 50 150 // camera position vector in percent coordinates of 3D area
Application:3DEnvironment:DynamicFeedbackTask floatlist CameraAim= 3 50 50 50 // camera aim point in percent coordinates
Application:3DEnvironment:DynamicFeedbackTask int CameraProjection= 0 0 0 2 // projection type: 0: flat, 1: wide angle perspective, 2: narrow angle perspective (enumeration)
Application:3DEnvironment:DynamicFeedbackTask floatlist LightSourcePos= 3 50 50 100 // light source position in percent coordinates
Application:3DEnvironment:DynamicFeedbackTask int LightSourceColor= 0x808080 // light source RGB color (color)
Application:3DEnvironment:DynamicFeedbackTask int WorkspaceBoundaryColor= 0xffffff 0 % % // workspace boundary color (0xff000000 for invisible) (color)
Application:3DEnvironment:DynamicFeedbackTask string WorkspaceBoundaryTexture= % // path of workspace boundary texture (inputfile)
Application:Feedback:DynamicFeedbackTask int VisualFeedback= 1 1 0 1 // provide visual stimulus (boolean)
Application:Feedback:DynamicFeedbackTask intlist VisualCatchTrials= 0 // list of visual catch trials, leave empty for none
Application:Human%20Interface%20Devices:KeystrokeFilter string KeystrokeStateName= % // State to be translated into keystrokes (0-F), empty for off
Application:Human%20Interface%20Devices:KeystrokeFilter string KeystrokeExpression= % // Expression that evaluates to a virtual keycode, empty for off
Application:Human%20Interface%20Devices:KeystrokeFilter string KeystrokeExpressionOnStartRun= % // Expression that initializes expression variables on StartRun
Connector:ConnectorOutput string ConnectorOutputAddress= % localhost:20321 % % // one or more IP:Port combinations, e.g. localhost:20321
Connector:ConnectorOutput string ConnectorOutputFormat= Verbose Verbose % % // Either "Verbose" or "JSON"
Application:GazeMonitor:GazeMonitorFilter int VisualizeGazeMonitorFilter= 0 0 0 1 // Visualize the gaze data on the app visualization (boolean)
Application:GazeMonitor:GazeMonitorFilter int EnforceFixation= 0 0 0 1 // Enforce a fixation point on the screen (boolean)
Application:GazeMonitor:GazeMonitorFilter string FixationX= 0.5 0.5 % % // X coordinate of fixation center - 0.0 to 1.0 (expression)
Application:GazeMonitor:GazeMonitorFilter string FixationY= 0.5 0.5 % % // Y coordinate of fixation center - 0.0 to 1.0 (expression)
Application:GazeMonitor:GazeMonitorFilter int ShowFixationZone= 0 0 0 1 // Show the legal fixation zone with a ring (boolean)
Application:GazeMonitor:GazeMonitorFilter float BlinkTime= 100ms 100ms 0 % // Maximum allowed time for invalid eyes
Application:GazeMonitor:GazeMonitorFilter float SaccadeTime= 100ms 100ms 0 % // Maximum allowed time for violating the fixation
Application:GazeMonitor:GazeMonitorFilter float FixationRadius= 0.1 0.1 0.0 1.0 // Allowable distance from fixation center
Application:GazeMonitor:GazeMonitorFilter string FixationImage= % // Image to render at fixation (inputfile)
Application:GazeMonitor:GazeMonitorFilter string FixationViolationImage= % // Image to render at fixation when violated (inputfile)
Application:GazeMonitor:GazeMonitorFilter string FixationViolationSound= % // Sound to play when fixation violated (inputfile)
Application:GazeMonitor:GazeMonitorFilter float FixationImageSize= 0.04 0.04 0.01 1.0 // Size in percentage of screen height of the fixation image
Application:GazeMonitor:GazeMonitorFilter int LogGazeInformation= 0 0 0 1 // Add Eyetracker information to applog (boolean)
Application:Localization:Localization string Language= Default Default % % // Language for user messages
Application:Localization:Localization matrix LocalizedStrings= 0 1 // Localized user messages
System:Core%20Connections string ApplicationIP= 127.0.0.1 127.0.0.1 % % // the Application module's listening IP
System:Core%20Connections string ApplicationPort= 26352 4200 1024 65535 // the Application module's listening port
System:Configuration matrix ApplicationVersion= { Framework Revision Build } 1 3.0.5 % Jul%2023%202013%2018:06:14 // Application version information
System:Configuration matrix ApplicationFilterChain= 5 { Filter%20Name Position%20String } ConnectorInput 2.9999 DynamicFeedbackTask 3 KeystrokeFilter 3.1 ConnectorOutput 3.9999 GazeMonitorFilter 3.A // Application filter chain
Source:Signal%20Properties:DataIOFilter int SourceCh= 64 16 1 % // number of digitized and stored channels
Source:Signal%20Properties:DataIOFilter int SampleBlockSize= 64 32 1 % // number of samples transmitted at a time
Source:Signal%20Properties:DataIOFilter int SamplingRate= 512Hz 256Hz 1 % // sample rate
Source:Signal%20Properties:DataIOFilter list ChannelNames= 64 FP1 FP2 F7 F3 Fz F4 F8 FC5 FC1 FC2 FC6 T7 C3 Cz C4 T8 TP9 CP5 CP1 CP2 CP6 TP10 P7 P3 Pz P4 P8 PO9 O1 Oz O2 PO10 AF7 AF3 AF4 AF8 F5 F1 F2 F6 FT9 FT7 FC3 FC4 FT8 FT10 C5 C1 C2 C6 TP7 CP3 CPz CP4 TP8 P5 P1 P2 P6 PO7 PO3 POz PO4 PO8 // list of channel names
Source:Signal%20Properties:DataIOFilter floatlist SourceChOffset= 64 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 % % // Offset for channels in A/D units
Source:Signal%20Properties:DataIOFilter floatlist SourceChGain= 64 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 % % // gain for each channel (A/D units -> muV)
Storage:Data%20Location:DataIOFilter string DataDirectory= C:\Users\eeglab\Desktop\data\B2B_subj1 ..\data % % // path to top level data directory (directory)
Storage:Session:DataIOFilter string SubjectName= darby_1d_SimulBCI Name % % // subject alias
Storage:Session:DataIOFilter string SubjectSession= 001 001 % % // three-digit session number
Storage:Session:DataIOFilter string SubjectRun= 00 00 % % // two-digit run number
Storage:Documentation:DataIOFilter string ID_System= % // BCI2000 System Code
Storage:Documentation:DataIOFilter string ID_Amp= % // BCI2000 Amp Code
Storage:Documentation:DataIOFilter string ID_Montage= % // BCI2000 Cap Montage Code
Visualize:Timing:DataIOFilter int VisualizeTiming= 1 1 0 1 // visualize system timing (0=no, 1=yes) (boolean)
Visualize:Source%20Signal:DataIOFilter int VisualizeSource= 1 1 0 1 // visualize raw brain signal (0=no, 1=yes) (boolean)
Visualize:Source%20Signal:DataIOFilter int VisualizeSourceDecimation= auto auto % % // decimation factor for raw brain signal
Visualize:Source%20Signal:DataIOFilter int VisualizeSourceBufferSize= auto auto % % // number of blocks to aggregate before sending to operator
Visualize:Source%20Signal:DataIOFilter int VisualizeSourceTime= 2s 2s 0 % // how much time in Source visualization
Visualize:Source%20Signal:DataIOFilter int SourceMin= -100muV -100muV % % // raw signal vis Min Value
Visualize:Source%20Signal:DataIOFilter int SourceMax= 100muV 100muV % % // raw signal vis Max Value
Source:gUSBampADC intlist SourceChList= 0 0 1 128 // list of channels to digitize
Source:gUSBampADC intlist SourceChDevices= 4 16 16 16 16 16 1 17 // number of digitized channels per device
Source:gUSBampADC int NumBuffers= 5 1 2 32 // number of software buffers to use
Source:gUSBampADC string DeviceIDMaster= UA-2007.02.14 // deviceID for the device whose SYNC goes to the slaves
Source:gUSBampADC int FilterEnabled= 1 1 0 1 // Enable pass band filter (0=no, 1=yes)
Source:gUSBampADC float FilterHighPass= 0.1 0.1 0 50 // high pass filter for pass band
Source:gUSBampADC float FilterLowPass= 60 60 0 4000 // low pass filter for pass band
Source:gUSBampADC int FilterModelOrder= 8 8 1 12 // filter model order for pass band
Source:gUSBampADC int FilterType= 1 1 1 2 // filter type for pass band (1=BUTTERWORTH, 2=CHEBYSHEV)
Source:gUSBampADC int NotchEnabled= 1 1 0 1 // Enable notch (0=no, 1=yes)
Source:gUSBampADC float NotchHighPass= 58 58 0 70 // high pass filter for notch filter
Source:gUSBampADC float NotchLowPass= 62 62 0 4000 // low pass filter for notch filter
Source:gUSBampADC int NotchModelOrder= 4 4 1 10 // filter model order for notch filter
Source:gUSBampADC int NotchType= 1 1 1 2 // filter type for pass band (1=CHEBYSHEV, 2=BUTTERWORTH)
Source:gUSBampADC list DeviceIDs= 4 UA-2007.02.14 UA-2007.02.15 UA-2007.04.06 UA-2007.04.07 // list of USBamps to be used (or auto)
Source:gUSBampADC int DigitalInput= 0 0 0 1 // enable digital input:  0: false, 1: true (enumeration)
Source:gUSBampADC int DigitalOutput= 0 0 0 1 // enable digital output on block acquisition (boolean)
Source:gUSBampADC string DigitalOutputEx= % // expression for output on digital output 2 (expression)
Source:gUSBampADC int SignalType= 1 0 0 1 // numeric type of output signal:  0: int16, 1: float32 (enumeration)
Source:gUSBampADC int AcquisitionMode= 0 0 0 2 // data acquisition mode:  0: analog signal acquisition, 1: calibration, 2: impedance (enumeration)
Source:gUSBampADC int CommonGround= 1 0 0 1 // internally connect GNDs from all blocks:  0: false, 1: true (enumeration)
Source:gUSBampADC int CommonReference= 1 0 0 1 // internally connect Refs from all blocks:  0: false, 1: true (enumeration)
Storage:Documentation:BCI2000FileWriter string StorageTime= % // time of beginning of data storage
Source:Alignment:AlignmentFilter int AlignChannels= 0 0 0 1 // align channels in time (0=no, 1=yes)
Source:Alignment:AlignmentFilter floatlist SourceChTimeOffset= 0 0 % % // time offsets for all source channels (may be empty)
Source:Online%20Processing:TransmissionFilter list TransmitChList= 64 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 // list of transmitted channels
System:Additional%20Connections:EventLink int EventLink= 1 1 0 1 // Send events from Operator to Source module (boolean)
Source:Log%20Input:KeyLogger int LogKeyboard= 0 0 0 1 // record keyboard to states (boolean)
System:Core%20Connections string SignalSourceIP= 127.0.0.1 127.0.0.1 % % // the SignalSource module's listening IP
System:Core%20Connections string SignalSourcePort= 26348 4200 1024 65535 // the SignalSource module's listening port
System:Configuration matrix SignalSourceVersion= { Framework Revision Build } 1 3.0.5 % Jul%2023%202013%2018:06:14 // SignalSource version information
System:Configuration matrix SignalSourceFilterChain= 8 { Filter%20Name Position%20String } DataIOFilter 0 gUSBampADC 1 GDFFileWriter 1 EDFFileWriter 1 BCI2000FileWriter 1 NullFileWriter 1 AlignmentFilter 1.1 TransmissionFilter 1.2 // SignalSource filter chain
Visualize:Processing%20Stages int VisualizeAlignmentFilter= 0 0 0 1 // Visualize AlignmentFilter output (boolean)
Visualize:Processing%20Stages int VisualizeTransmissionFilter= 0 0 0 1 // Visualize TransmissionFilter output (boolean)
System:Randomization int RandomSeed= 13828 0 % % // seed for the BCI2000 pseudo random number generator
System:Randomization int RandomizationWarning= 1 1 0 1 // warn if subsequent Runs have identical RandomSeed value (boolean)
System:State%20Vector int StateVectorLength= 23 16 % % // length of the state vector in bytes
