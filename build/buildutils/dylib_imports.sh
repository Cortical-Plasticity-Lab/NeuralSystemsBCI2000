#!/bin/sh

# $Id$
# Description: Build tool to automatically create glue code that allows importing
#    functions from a dynamic library without linking to an import library.
#    In the code that uses imported functions, you will need to include the created
#    header file rather than the original one.
# Author: juergen.mellinger@uni-tuebingen.de

if [ ! $1 ]; then
  echo Expected a header file name and optional preprocessor arguments. 1>&2
  exit -1
fi

tmp=$(mktemp)
lib=$(basename $1 .h)

# 1) run the input header file through the gcc precompiler as if it were a Windows build
# 2) remove all macro/pragma lines
# 3) join multi-line statements into a single line each
# 4) retain only declarations of imported functions
gcc -DWIN32 -D_WIN32 -DWINAPI=__stdcall -E -x c "$@" \
| grep -v "#" \
| perl -ne "\$s.=\$_; if( \$s=~/;/) { \$s=~s/[\r\n]/ /g; \$s=~s/\s+/ /g; \$s=~s/^ //; \$s=~s/; /;/; \$s=~s/;/;\n/g; print \$s; \$s=\"\"; }" \
| perl -ne "print if s/__attribute__\(\(dllimport\)\)\ // || s/__declspec\(dllimport\)\ //" \
> $tmp

parse="\W*((const\s*|)((un|)signed\s*|)\w+\s*\**)\W+(__attribute__\(\((\w+)__\)\)\W+)*(\w+)(.*);"

# create header file
file=$lib.imports.h

>$file cat <<EOF
// Import declarations for $1, generated by $(basename $0)
#ifndef ${lib}_IMPORTS_H
#define ${lib}_IMPORTS_H

#include "Win32Defs.h"

#if DYNAMIC_IMPORTS
EOF

# redefine function names
cat $tmp | perl -ne "use Digest::MD5 qw(md5_hex); if(~s/$parse\s*\n/\$7/) { print \"#define \$_ \$_\_\".substr(md5_hex(\$_),0,4).\"\n\" }" >>$file

# include original file
>>$file cat <<EOF
#endif // DYNAMIC_IMPORTS

#include "$lib.h"

#if DYNAMIC_IMPORTS
EOF

# declare function pointers
cat $tmp | perl -ne "print if s/$parse/#undef \$7/" >>$file
echo >>$file
echo "extern \"C\" {" >>$file
cat $tmp | perl -ne "print if s/$parse/extern \$1 (\$6 *\$7)\$8;/" >>$file

>>$file cat <<EOF
}
#endif // DYNAMIC_IMPORTS

namespace Dylib { bool ${lib}_Loaded(); }

#endif // ${lib}_IMPORTS_H
EOF

# cpp file
file=$lib.imports.cpp

>$file cat <<EOF
// Import definitions for $1, generated by $(basename $0)
#include "$lib.imports.h"
#include "DylibImports.h"

#if DYNAMIC_IMPORTS

extern "C" {
EOF

# define a global pointer for each function
cat $tmp | perl -ne "print if s/$parse/\$1 (\$6 *\$7)\$8 = 0;/" >>$file

>>$file cat <<EOF
}

static const Dylib::Import imports[] =
{
EOF

# add an array entry for each imported function
cat $tmp | perl -ne "print if s/$parse/  { \"\$7\", (void**)&\$7, Dylib::Import::none },/" >>$file

>>$file cat <<EOF
  { 0, 0, 0 }
};

#endif // DYNAMIC_IMPORTS

// Here you may specify a custom error message to be displayed when the library cannot be found.
static const char* notFoundMsg = "";
// Here you may specify an URL to some local or remote help resource.
static const char* notFoundURL = "";
RegisterDylib( $lib, imports, notFoundMsg, notFoundURL );

EOF

rm $tmp
